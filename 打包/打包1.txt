This file is a merged representation of the entire codebase, combined into a single document by Repomix.
The content has been processed where security check has been disabled.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Security check has been disabled - content may contain sensitive information
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
netlify/
  functions/
    gemini-proxy.js
public/
  index.html
src/
  App.css
  App.js
  index.css
  index.js
.gitignore
netlify.toml
package.json
README.md
tailwind.config.js
參考程式.txt
參考程式2.txt
參考程式3.txt
參考程式4.txt
參考程式5.txt
待實作.txt
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="netlify/functions/gemini-proxy.js">
// 使用 ES 模組語法，Netlify Functions 支援
import fetch from 'node-fetch';

// API 金鑰從環境變數讀取，確保安全
const apiKey = process.env.GEMINI_API_KEY;

// Netlify Function 的主要處理函數
exports.handler = async (event, context) => {
  // 只允許 POST 請求
  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      body: JSON.stringify({ error: 'Method Not Allowed' }),
    };
  }

  try {
    // 從前端請求中解析出資料
    const { systemPrompt, userPrompt, base64Image } = JSON.parse(event.body);

    // 驗證收到的資料
    if (!systemPrompt || !userPrompt || !base64Image) {
      return {
        statusCode: 400,
        body: JSON.stringify({ error: 'Missing required fields: systemPrompt, userPrompt, or base64Image' }),
      };
    }
    
    // Google Gemini API 的端點
    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=${apiKey}`;

    // 構建與 Google API 規格相符的 payload
    const payload = {
      contents: [{
        role: "user",
        parts: [
          { text: userPrompt },
          {
            inlineData: {
              mimeType: "image/jpeg",
              data: base64Image
            }
          }
        ]
      }],
      systemInstruction: { parts: [{ text: systemPrompt }] },
      generationConfig: {
        responseMimeType: "application/json",
        responseSchema: {
          type: "OBJECT",
          properties: {
            "scannedBarcode": { "type": "STRING", "description": "影像中找到的 EAN, UPC 或其他產品條碼數字，如果不可見則為空字串。" },
            "extractedPrice": { "type": "STRING", "description": "主要售價，格式為乾淨的字串，不帶貨幣符號（例如：'120.5'）。如果找不到價格則為空字串。" },
            "storeName": { "type": "STRING", "description": "價目標籤或收據所示的商店名稱。如果不可見則為空字串。" },
            "discountDetails": { "type": "STRING", "description": "發現的任何促銷或折扣的詳細描述（例如：'買一送一', '第二件半價', '有效期限 2026/01/01'）。如果沒有折扣則為空字串。" }
          },
          "required": ["scannedBarcode", "extractedPrice", "storeName", "discountDetails"]
        }
      }
    };

    // 呼叫 Google API
    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload),
    });

    // 檢查 Google API 的回應
    if (!response.ok) {
      const errorBody = await response.json();
      console.error('Google API Error:', errorBody);
      return {
        statusCode: response.status,
        body: JSON.stringify({ error: `Google API error: ${errorBody.error?.message || 'Unknown error'}` }),
      };
    }

    // 將 Google API 的成功回應直接傳回給前端
    const data = await response.json();
    return {
      statusCode: 200,
      body: JSON.stringify(data),
    };

  } catch (error) {
    console.error('Serverless Function Error:', error);
    return {
      statusCode: 500,
      body: JSON.stringify({ error: `Internal Server Error: ${error.message}` }),
    };
  }
};
</file>

<file path="public/index.html">
<!DOCTYPE html>
<html lang="zh-TW">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="比價神器 - 條碼掃描與價格比較應用"
    />
    <title>比價神器</title>
  </head>
  <body>
    <noscript>您需要啟用JavaScript才能運行此應用程式。</noscript>
    <div id="root"></div>
  </body>
</html>
</file>

<file path="src/App.css">
/* 應用基本樣式 */
.App {
  text-align: center;
  min-height: 100vh;
}

/* 自定義樣式可以在這裡添加 */
</file>

<file path="src/App.js">
import React, { useState, useEffect, useCallback, useMemo, useRef } from 'react';
import { PaintBucket, DollarSign, Barcode, ClipboardCheck, X, Camera, Zap, FileText, RotateCcw } from 'lucide-react';

// -----------------------------------------------------------------------------
// 1. 核心設定與工具函數 (Core Setup & Utilities)
// -----------------------------------------------------------------------------

// MVP 階段使用 Local Storage 模擬 App ID
const MVP_APP_ID = 'mvp-local-price-app'; 

/**
 * DJB2 雜湊算法：將條碼字串轉換為數值 ID (numericalID)。
 * @param {string} str - 原始條碼字串
 * @returns {number} - 32位元無符號整數
 */
function djb2Hash(str) {
    let hash = 5381;
    for (let i = 0; i < str.length; i++) {
        // hash * 33 + charCode
        hash = ((hash << 5) + hash) + str.charCodeAt(i);
    }
    // 轉換為無符號 32 位整數
    return hash >>> 0;
}

/**
 * 指數退避 (Exponential Backoff) 執行 API 呼叫
 */
async function callGeminiApiWithRetry(payload, apiUrl, maxRetries = 3) {
    let lastError = null;
    for (let i = 0; i < maxRetries; i++) {
        try {
            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            if (!response.ok) {
                const errorBody = await response.json();
                throw new Error(`API response error: ${response.status} - ${errorBody.error?.message || 'Unknown error'}`);
            }

            const result = await response.json();
            const candidate = result.candidates?.[0];

            if (candidate && candidate.content?.parts?.[0]?.text) {
                const jsonText = candidate.content.parts[0].text;
                try {
                    // 解析 JSON 內容
                    return JSON.parse(jsonText);
                } catch (parseError) {
                    console.error("JSON Parse Error:", jsonText, parseError);
                    throw new Error("AI 輸出格式錯誤，無法解析 JSON。");
                }
            } else {
                throw new Error("AI 無法生成有效內容。");
            }

        } catch (error) {
            lastError = error;
            console.warn(`API call failed (Attempt ${i + 1}/${maxRetries}):`, error.message);
            if (i < maxRetries - 1) {
                const delay = Math.pow(2, i) * 1000; // 1s, 2s, 4s
                await new Promise(resolve => setTimeout(resolve, delay));
            }
        }
    }
    throw lastError; // 所有重試失敗後拋出最後一個錯誤
}


// -----------------------------------------------------------------------------
// 2. 主題配置與本地儲存設定 (Theming & Local Setup)
// -----------------------------------------------------------------------------

const THEMES = {
    'Default (Indigo)': { primary: 'bg-indigo-600', light: 'bg-indigo-100', hover: 'hover:bg-indigo-700', border: 'border-indigo-600', text: 'text-indigo-600', color: 'indigo' },
    '海洋藍 (Ocean Blue)': { primary: 'bg-blue-600', light: 'bg-blue-100', hover: 'hover:bg-blue-700', border: 'border-blue-600', text: 'text-blue-600', color: 'blue' },
    '森林綠 (Forest Green)': { primary: 'bg-green-600', light: 'bg-green-100', hover: 'hover:bg-green-700', border: 'border-green-600', text: 'text-green-600', color: 'green' },
    '夕陽紅 (Sunset Red)': { primary: 'bg-red-600', light: 'bg-red-100', hover: 'hover:bg-red-700', border: 'border-red-600', text: 'text-red-600', color: 'red' },
    '活力橙 (Vibrant Orange)': { primary: 'bg-orange-600', light: 'bg-orange-100', hover: 'hover:bg-orange-700', border: 'border-orange-600', text: 'text-orange-600', color: 'orange' },
    '薰衣草紫 (Lavender)': { primary: 'bg-purple-600', light: 'bg-purple-100', hover: 'hover:bg-purple-700', border: 'border-purple-600', text: 'text-purple-600', color: 'purple' },
};
const DEFAULT_THEME_KEY = 'Default (Indigo)';

function useLocalMVPSetup() {
    const [userId] = useState(() => {
        let savedId = localStorage.getItem('mvp_user_id');
        if (!savedId) {
            savedId = crypto.randomUUID();
            localStorage.setItem('mvp_user_id', savedId);
        }
        return savedId;
    });

    const [currentTheme, setCurrentTheme] = useState(() => {
        const savedKey = localStorage.getItem('appTheme') || DEFAULT_THEME_KEY;
        return THEMES[savedKey] || THEMES[DEFAULT_THEME_KEY];
    });

    const saveUserTheme = useCallback((themeKey) => {
        localStorage.setItem('appTheme', themeKey);
        setCurrentTheme(THEMES[themeKey] || THEMES[DEFAULT_THEME_KEY]);
    }, []);

    const isAuthReady = true; 
    
    return { userId, isAuthReady, currentTheme, saveUserTheme, appId: MVP_APP_ID };
}

// 主題選擇元件 (Theme Selector Component)
function ThemeSelector({ theme, saveTheme, onClose }) {
    // 渲染邏輯與之前相同，略
    const handleThemeChange = (themeKey) => {
        saveTheme(themeKey);
    };

    const handleReset = () => {
        saveTheme(DEFAULT_THEME_KEY);
    };

    return (
        <div className="fixed inset-0 bg-gray-900 bg-opacity-75 z-50 flex items-center justify-center p-4">
            <div className="bg-white rounded-xl shadow-2xl w-full max-w-md p-6 transform transition-all">
                <h3 className={`text-xl font-bold ${theme.text} mb-4 border-b pb-2`}>
                    <PaintBucket className="inline-block w-5 h-5 mr-2" />
                    介面配色選項
                </h3>
                
                <div className="grid grid-cols-2 gap-4 mb-6">
                    {Object.keys(THEMES).map((themeKey) => {
                        const themeData = THEMES[themeKey];
                        const isSelected = theme.color === themeData.color;
                        return (
                            <button
                                key={themeKey}
                                onClick={() => handleThemeChange(themeKey)}
                                className={`
                                    p-3 rounded-lg text-white font-medium shadow-md transition-all 
                                    ${themeData.primary} ${themeData.hover} 
                                    ${isSelected ? 'ring-4 ring-offset-2 ring-opacity-70 ring-gray-400' : ''}
                                `}
                                style={{ transform: isSelected ? 'scale(1.05)' : 'scale(1)' }}
                            >
                                {themeKey}
                            </button>
                        );
                    })}
                </div>

                <div className="flex justify-between items-center pt-4 border-t">
                    <button
                        onClick={handleReset}
                        className="flex items-center text-sm font-medium text-gray-600 hover:text-gray-900 transition-colors"
                    >
                        <RotateCcw className="w-4 h-4 mr-1" />
                        清除還原 (預設)
                    </button>
                    <button
                        onClick={onClose}
                        className={`px-4 py-2 text-white font-semibold rounded-lg shadow-lg ${theme.primary} ${theme.hover} transition-all`}
                    >
                        關閉
                    </button>
                </div>
            </div>
        </div>
    );
}

// -----------------------------------------------------------------------------
// 3. AI 視覺擷取與分析元件 (AIOcrCaptureModal)
// -----------------------------------------------------------------------------

/**
 * 負責攝影機存取、擷取畫面並呼叫 AI 進行分析的 Modal 元件。
 * 輸出為結構化 JSON 數據。
 */
function AIOcrCaptureModal({ theme, onAnalysisSuccess, onClose }) {
    const videoRef = useRef(null);
    const streamRef = useRef(null);
    const [isCameraOn, setIsCameraOn] = useState(false);
    const [scanError, setScanError] = useState('');
    const [isAnalyzing, setIsAnalyzing] = useState(false);
    const [capturedImage, setCapturedImage] = useState(null);

    const stopCamera = useCallback(() => {
        if (streamRef.current) {
            streamRef.current.getTracks().forEach(track => track.stop());
            streamRef.current = null;
        }
        if (videoRef.current) {
            videoRef.current.srcObject = null;
        }
        setIsCameraOn(false);
    }, []);

    const startCamera = useCallback(async () => {
        setScanError('');
        setCapturedImage(null);
        setIsCameraOn(true); 
        try {
            const stream = await navigator.mediaDevices.getUserMedia({
                video: {
                    facingMode: "environment",
                    width: { ideal: 1280 },
                    height: { ideal: 720 }
                }
            });
            streamRef.current = stream;

            if (videoRef.current) {
                videoRef.current.srcObject = stream;
                await videoRef.current.play();
            }
        } catch (err) {
            console.error("無法存取攝影機:", err);
            setScanError(`無法存取攝影機或權限被拒絕。請檢查瀏覽器設定。 (${err.name} - ${err.message})`);
            setIsCameraOn(false);
        }
    }, []);

    // On mount, start the camera. On unmount, stop it.
    useEffect(() => {
        startCamera();
        return () => {
            stopCamera();
        };
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);

    const handleCapture = useCallback(() => {
        if (!videoRef.current || !videoRef.current.srcObject) return;

        const video = videoRef.current;
        const canvas = document.createElement('canvas');
        
        const cropWidth = video.videoWidth * 0.75;
        const cropHeight = video.videoHeight * 0.75;
        const cropX = (video.videoWidth - cropWidth) / 2;
        const cropY = (video.videoHeight - cropHeight) / 2;

        canvas.width = cropWidth;
        canvas.height = cropHeight;

        const ctx = canvas.getContext('2d');
        ctx.drawImage(video, cropX, cropY, cropWidth, cropHeight, 0, 0, canvas.width, canvas.height);

        const base64Data = canvas.toDataURL('image/jpeg', 0.9);
        
        stopCamera();
        setCapturedImage(base64Data);

    }, [stopCamera]);

    // 呼叫 Gemini API 進行視覺分析
    const handleAnalyze = useCallback(async () => {
        if (!capturedImage) {
            setScanError("沒有可分析的影像。");
            return;
        }
        setIsAnalyzing(true);
        setScanError('');

        try {
            const base64Image = capturedImage.split(',')[1]; // 移除 MIME 類型前綴

            const systemPrompt = "你是一位專業的價目標籤和收據分析師。請從提供的影像中提取產品條碼（如果可見）、主要售價、商店名稱以及任何詳細的折扣或促銷資訊。請嚴格以 JSON 格式輸出。";
            const userPrompt = "分析此產品或價目標籤的影像，並提取所需的結構化資訊。請在 discountDetails 中提供所有相關的促銷訊息，例如買一送一、有效期限等。";
            const apiUrl = `/.netlify/functions/gemini-proxy`;

            const payload = { systemPrompt, userPrompt, base64Image };

            const analysisResult = await callGeminiApiWithRetry(payload, apiUrl);

            onAnalysisSuccess(analysisResult);
            onClose();

        } catch (error) {
            console.error("AI 分析失敗:", error);
            setScanError(`AI 分析錯誤: ${error.message}`);
        } finally {
            setIsAnalyzing(false);
        }
    }, [capturedImage, onAnalysisSuccess, onClose]);

    // 模擬 AI 分析成功
    const handleSimulatedAnalysis = () => {
        const mockResult = {
            scannedBarcode: '4710123456789',
            extractedPrice: (Math.random() * 50 + 100).toFixed(0).toString(),
            storeName: '模擬超商 (AI)',
            discountDetails: '買二送一優惠 / 限時促銷',
        };
        onAnalysisSuccess(mockResult);
        onClose();
    };

    const themePrimary = theme.primary;
    const themeHover = theme.hover;

    return (
        <div className="fixed inset-0 bg-gray-900 bg-opacity-95 z-50 flex flex-col items-center justify-center p-4">
            <div className="bg-white rounded-xl shadow-2xl w-full max-w-lg p-6 transform transition-all flex flex-col items-center">
                <header className="flex justify-between items-center w-full mb-4 border-b pb-2">
                    <h3 className={`text-xl font-bold ${theme.text} flex items-center`}>
                        <Zap className="inline-block w-5 h-5 mr-2" />
                        AI 視覺擷取與分析
                    </h3>
                    <button onClick={() => { stopCamera(); onClose(); }} className="p-1 rounded-full text-gray-500 hover:text-gray-900">
                        <X className="w-6 h-6" />
                    </button>
                </header>

                {/* 狀態顯示 */}
                {isAnalyzing && (
                    <div className={`w-full p-4 mb-4 rounded-lg bg-yellow-100 text-yellow-800 flex items-center justify-center`}>
                        <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-yellow-800" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        正在呼叫 AI 分析影像，請稍候...
                    </div>
                )}
                
                {scanError ? (
                    <div className="text-red-600 bg-red-100 p-4 rounded-lg w-full mb-4 text-center">
                        {scanError}
                    </div>
                ) : (
                    <div className="relative w-full aspect-video bg-black rounded-lg overflow-hidden mb-4 border-4 border-dashed border-white">
                        {capturedImage ? (
                            <img src={capturedImage} alt="Captured" className="w-full h-full object-contain" />
                        ) : (
                            <video 
                                ref={videoRef} 
                                className="w-full h-full object-cover" 
                                playsInline 
                                muted
                            ></video>
                        )}
                        {/* 掃描對焦框 (僅在攝影機開啟時顯示) */}
                        {isCameraOn && (
                            <div className="absolute inset-0 flex items-center justify-center pointer-events-none">
                                <div className="w-[75%] h-[75%] border-4 border-yellow-400 border-opacity-75 rounded-lg shadow-lg"></div>
                            </div>
                        )}
                    </div>
                )}
                
                {/* 動作按鈕 */}
                <div className="w-full">
                    {!capturedImage && isCameraOn && !scanError && (
                        <button
                            onClick={handleCapture}
                            className={`w-full p-3 mb-3 rounded-lg text-white font-semibold shadow-lg transition-all ${themePrimary} ${themeHover} flex items-center justify-center`}
                            disabled={isAnalyzing}
                        >
                            <Camera className="w-5 h-5 mr-2" />
                            擷取畫面
                        </button>
                    )}

                    {capturedImage && !scanError && (
                        <div className="grid grid-cols-2 gap-4 mb-3">
                            <button
                                onClick={startCamera} // 重新拍攝
                                className="w-full p-3 rounded-lg bg-gray-500 hover:bg-gray-600 text-white font-semibold shadow-lg transition-all flex items-center justify-center"
                                disabled={isAnalyzing}
                            >
                                重新拍攝
                            </button>
                            <button
                                onClick={handleAnalyze}
                                className={`w-full p-3 rounded-lg text-white font-semibold shadow-lg transition-all ${themePrimary} ${themeHover} flex items-center justify-center`}
                                disabled={isAnalyzing}
                            >
                                <Zap className="w-5 h-5 mr-2" />
                                開始 AI 分析
                            </button>
                        </div>
                    )}

                    {/* 模擬按鈕 (用於測試) */}
                    <button
                        onClick={handleSimulatedAnalysis}
                        className="w-full p-3 mb-3 bg-gray-500 hover:bg-gray-600 text-white font-semibold rounded-lg shadow-lg transition-all"
                        disabled={isAnalyzing}
                    >
                        模擬 AI 分析成功 (測試用)
                    </button>

                    <button
                        onClick={() => { stopCamera(); onClose(); }}
                        className="w-full p-3 bg-red-500 hover:bg-red-600 text-white font-semibold rounded-lg shadow-lg transition-all"
                        disabled={isAnalyzing}
                    >
                        關閉
                    </button>
                </div>
            </div>
        </div>
    );
}


// -----------------------------------------------------------------------------
// 4. 主應用程式元件 (App Component)
// -----------------------------------------------------------------------------

function App() {
    const { userId, isAuthReady, currentTheme, saveUserTheme } = useLocalMVPSetup();
    
    // UI 狀態管理
    const [barcode, setBarcode] = useState('');
    const [productName, setProductName] = useState('');
    const [currentPrice, setCurrentPrice] = useState('');
    const [discountDetails, setDiscountDetails] = useState(''); 
    const [isThemeModalOpen, setIsThemeModalOpen] = useState(false);
    const [isCaptureModalOpen, setIsCaptureModalOpen] = useState(false); 
    const [comparisonResult, setComparisonResult] = useState({
        isBest: false,
        bestPrice: null,
        bestStore: null,
        message: '等待比價數據...'
    });
    const [isLoading, setIsLoading] = useState(false); 
    const [lookupStatus, setLookupStatus] = useState('ready'); 
    const [statusMessage, setStatusMessage] = useState(''); 
    const [storeName, setStoreName] = useState(''); // 新增商店名稱狀態

    // -----------------------------------------------------------------------------
    // 產品識別邏輯 (Local Storage 版本)
    // -----------------------------------------------------------------------------
    const lookupProduct = useCallback(async (barcodeData) => {
        if (!barcodeData || barcodeData.length < 5) {
            setProductName('');
            setLookupStatus('ready');
            return;
        }

        setLookupStatus('searching');
        const numericalID = djb2Hash(barcodeData);
        
        try {
            await new Promise(r => setTimeout(r, 200)); 
            
            const productsJson = localStorage.getItem('MVP_PRODUCTS') || '{}';
            const products = JSON.parse(productsJson);

            if (products[numericalID]) {
                setProductName(products[numericalID].productName);
                setLookupStatus('found');
            } else {
                setProductName('');
                setLookupStatus('new');
            }
        } catch (error) {
            console.error("查詢產品失敗 (Local Storage):", error);
            setLookupStatus('ready');
        }
    }, []);

    useEffect(() => {
        if (barcode.length > 0 && isAuthReady) {
            const timer = setTimeout(() => {
                lookupProduct(barcode);
            }, 500); 
            return () => clearTimeout(timer); 
        }
    }, [barcode, isAuthReady, lookupProduct]);

    // 處理狀態訊息自動消失
    useEffect(() => {
        if (statusMessage) {
            const timer = setTimeout(() => {
                setStatusMessage('');
            }, 3000);
            return () => clearTimeout(timer);
        }
    }, [statusMessage]);

    // 處理 AI 分析成功並填入欄位
    const handleAiCaptureSuccess = useCallback((result) => {
        const { scannedBarcode, extractedPrice, storeName, discountDetails } = result;
        
        // 1. 自動填入條碼
        if (scannedBarcode && scannedBarcode.length > 5) {
            setBarcode(scannedBarcode);
        } else if (!barcode) {
             setStatusMessage("AI 未能識別條碼，請手動輸入或確保條碼清晰！");
        }

        // 2. 自動填入價格、商店、折扣
        setCurrentPrice(extractedPrice || '');
        setStoreName(storeName || '');
        setDiscountDetails(discountDetails || '');

        setStatusMessage(`AI 分析成功！價格: $${extractedPrice || '?'}, 商店: ${storeName || '?'}, 折扣: ${discountDetails || '無'}`);
    }, [barcode]);
    
    // 儲存並比價函數 (Local Storage 版本)
    const saveAndComparePrice = useCallback(async () => {
        const numericalID = djb2Hash(barcode);
        const priceValue = parseFloat(currentPrice);

        if (!userId || !barcode || !productName || isNaN(priceValue)) {
            setStatusMessage("請確保已輸入條碼、產品名稱和有效價格！");
            return;
        }

        setIsLoading(true);
        
        try {
            // 從 Local Storage 獲取數據
            const productsJson = localStorage.getItem('MVP_PRODUCTS') || '{}';
            const allRecordsJson = localStorage.getItem('MVP_PRICE_RECORDS') || '[]';
            let products = JSON.parse(productsJson);
            let allRecords = JSON.parse(allRecordsJson);

            // 0. 檢查並創建產品主檔 (如果不存在)
            if (!products[numericalID]) {
                products[numericalID] = {
                    numericalID,
                    barcodeData: barcode,
                    productName,
                    createdAt: new Date().toISOString(),
                };
                localStorage.setItem('MVP_PRODUCTS', JSON.stringify(products));
            }
            
            // 1. 儲存新的價格紀錄
            const priceRecord = {
                numericalID,
                productName,
                storeName: storeName || "手動輸入",
                price: priceValue,
                discountDetails: discountDetails, 
                timestamp: new Date().toISOString(),
                recordedBy: userId,
            };
            
            allRecords.push(priceRecord);
            localStorage.setItem('MVP_PRICE_RECORDS', JSON.stringify(allRecords));
            
            // 2. 執行比價邏輯 - 查詢該產品所有歷史紀錄
            const records = allRecords.filter(r => r.numericalID === numericalID);

            if (records.length <= 1) { 
                setComparisonResult({ 
                    isBest: true, 
                    bestPrice: priceValue,
                    bestStore: storeName || "手動輸入",
                    message: '這是第一筆紀錄！' 
                });
            } else {
                const bestDeal = records.reduce((best, cur) => cur.price < best.price ? cur : best);
                const isCurrentBest = priceRecord.price <= bestDeal.price;
                
                // 比較邏輯：標價最低優先；標價相同則有折扣優先
                const isTrulyBest = isCurrentBest && (priceRecord.price < bestDeal.price || (priceRecord.price === bestDeal.price && priceRecord.discountDetails !== ''));
                
                setComparisonResult({
                    isBest: isTrulyBest,
                    bestPrice: bestDeal.price,
                    bestStore: bestDeal.storeName,
                    message: isTrulyBest 
                        ? '恭喜！這是目前紀錄中的最低標價 (或具備折扣)！' 
                        : `非最低標價。歷史最低標價為 $${bestDeal.price} (商店: ${bestDeal.storeName})`
                });
            }

        } catch (error) {
            console.error("儲存或比價失敗 (Local Storage):", error);
            setStatusMessage("數據操作失敗，請檢查瀏覽器設定或本地儲存空間。");
        } finally {
            setIsLoading(false);
        }
    }, [userId, barcode, productName, currentPrice, discountDetails, storeName]); 

    // 主題變數，用於動態 Tailwind 類別
    const themePrimary = currentTheme.primary;
    const themeText = currentTheme.text;
    const themeLight = currentTheme.light;
    const themeBorder = currentTheme.border;

    // 根據查詢狀態顯示產品名稱提示
    const productNamePlaceholder = useMemo(() => {
        switch(lookupStatus) {
            case 'searching':
                return '正在查詢產品資料...';
            case 'found':
                return '產品名稱已自動載入';
            case 'new':
                return '產品不存在，請手動輸入名稱';
            default:
                return '請先輸入條碼或掃描條碼';
        }
    }, [lookupStatus]);


    if (!isAuthReady) {
        return (
            <div className="flex items-center justify-center min-h-screen bg-gray-50">
                <p className="text-xl text-gray-700">正在初始化本地應用程式...</p>
            </div>
        );
    }

    return (
        <div className={`min-h-screen p-4 sm:p-8 ${themeLight}`}>
            <div className="max-w-xl mx-auto">
                <header className="flex justify-between items-center mb-6 border-b pb-4">
                    <h1 className={`text-3xl font-extrabold ${themeText} flex items-center`}>
                        <Barcode className="w-8 h-8 mr-2" />
                        條碼比價神器 (MVP-AI)
                    </h1>
                    <div className="flex items-center space-x-3">
                        <button 
                            onClick={() => setIsThemeModalOpen(true)}
                            className={`p-2 rounded-full text-white shadow-md transition-all ${themePrimary} hover:opacity-80`}
                            title="設定介面主題"
                        >
                            <PaintBucket className="w-5 h-5" />
                        </button>
                        <p className="text-sm text-gray-500 hidden sm:block">用戶 ID: {userId}</p>
                    </div>
                </header>

                {/* 狀態訊息提示 */}
                {statusMessage && (
                    <div className="bg-red-500 text-white p-3 rounded-lg shadow-md mb-4 text-center font-medium transition-opacity duration-300">
                        {statusMessage}
                    </div>
                )}

                {/* 整合流程卡片：AI 擷取入口 */}
                <div className={`p-6 rounded-xl shadow-2xl bg-white border-t-4 ${themeBorder}`}>
                    <h2 className={`text-xl font-semibold ${themeText} mb-6 flex items-center`}>
                        <Zap className="w-5 h-5 mr-2" /> 
                        步驟 1: AI 視覺自動擷取資料
                    </h2>
                    
                    {/* AI 擷取按鈕 - 開啟 Modal */}
                    <button 
                        className={`w-full p-4 rounded-lg text-white font-bold text-lg shadow-xl transition-all ${themePrimary} hover:opacity-80 flex items-center justify-center`}
                        onClick={() => setIsCaptureModalOpen(true)}
                    >
                        <Camera className="inline-block w-6 h-6 mr-3" /> 
                        開啟鏡頭，擷取條碼與價目標籤
                    </button>
                    
                    <hr className="my-6 border-gray-200" />

                    <h2 className={`text-xl font-semibold text-gray-700 mb-4 flex items-center`}>
                        <FileText className="w-5 h-5 mr-2" /> 
                        步驟 2: 檢查或手動輸入資料
                    </h2>

                    {/* 條碼輸入區 */}
                    <div className="mb-4">
                        <label className="block text-gray-700 font-medium mb-1">條碼數據 (Barcode Data)</label>
                        <input
                            type="text"
                            value={barcode}
                            onChange={(e) => setBarcode(e.target.value)}
                            placeholder="AI 自動填入，或手動輸入"
                            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition"
                        />
                    </div>
                    
                    {/* 產品名稱區 - 配合自動查詢 */}
                    <div className="mb-4">
                        <label className="block text-gray-700 font-medium mb-1">產品名稱 (Product Name)</label>
                        <input
                            type="text"
                            value={productName}
                            onChange={(e) => setProductName(e.target.value)}
                            placeholder={productNamePlaceholder}
                            className={`w-full p-3 border border-gray-300 rounded-lg transition 
                                ${lookupStatus === 'found' ? 'bg-green-50' : lookupStatus === 'new' ? 'bg-yellow-50' : ''}`}
                            readOnly={lookupStatus === 'found'} 
                        />
                        <p className="text-sm text-gray-500 mt-1">
                            數值 ID (Hash): {barcode ? djb2Hash(barcode) : '尚未計算'}
                        </p>
                    </div>

                    {/* 價格與商店輸入/OCR 區 */}
                    <div className="grid grid-cols-2 gap-4 mb-4">
                        <div>
                            <label className="block text-gray-700 font-medium mb-1">標價 ($) <span className="text-red-500">*</span></label>
                            <input
                                type="number"
                                value={currentPrice}
                                onChange={(e) => setCurrentPrice(e.target.value)}
                                placeholder="AI 擷取"
                                className="w-full p-3 border border-gray-300 rounded-lg"
                            />
                        </div>
                        <div>
                            <label className="block text-gray-700 font-medium mb-1">商店名稱</label>
                            <input
                                type="text"
                                value={storeName} 
                                onChange={(e) => setStoreName(e.target.value)}
                                placeholder="AI 擷取"
                                className="w-full p-3 border border-gray-300 rounded-lg"
                            />
                        </div>
                    </div>
                    
                    {/* 優惠細節輸入區 (新增) */}
                    <div className="mb-6">
                        <label className="block text-gray-700 font-medium mb-1">優惠細節/促銷活動 (Discount Details)</label>
                        <input
                            type="text"
                            value={discountDetails}
                            onChange={(e) => setDiscountDetails(e.target.value)}
                            placeholder="AI 擷取 (例如: 買二送一, 第二件半價)"
                            className="w-full p-3 border border-gray-300 rounded-lg"
                        />
                    </div>

                    {/* 儲存紀錄並比價 */}
                    <button 
                        className={`w-full mt-4 p-3 rounded-lg text-white font-semibold shadow-lg transition-all bg-emerald-500 hover:bg-emerald-600`}
                        onClick={saveAndComparePrice}
                        disabled={isLoading}
                    >
                        <ClipboardCheck className="inline-block w-5 h-5 mr-2" /> 
                        {isLoading ? '儲存並比價中...' : '步驟 3: 儲存紀錄並比價'}
                    </button>
                </div>

                {/* 比價結果顯示區 */}
                <div className="mt-8">
                    <h2 className={`text-xl font-semibold ${themeText} mb-4 flex items-center`}>
                        <DollarSign className="w-5 h-5 mr-2" />
                        比價結果
                    </h2>
                    <div className={`p-6 rounded-xl shadow-xl border-2 ${comparisonResult.isBest ? 'border-green-500 bg-green-50' : 'border-yellow-500 bg-yellow-50'}`}>
                        <p className={`text-lg font-bold ${comparisonResult.isBest ? 'text-green-700' : 'text-yellow-700'}`}>
                            {comparisonResult.message}
                        </p>
                        {comparisonResult.bestPrice && (
                            <p className="text-sm text-gray-600 mt-2">
                                歷史最低標價: ${comparisonResult.bestPrice}
                            </p>
                        )}
                        <p className="text-xs text-gray-500 mt-2">
                            **附註:** 您的紀錄已儲存在瀏覽器的本地儲存中 (Local Storage)。
                        </p>
                    </div>
                </div>
            </div>

            {/* 主題選擇 Modal */}
            {isThemeModalOpen && (
                <ThemeSelector 
                    theme={currentTheme} 
                    saveTheme={saveUserTheme} 
                    onClose={() => setIsThemeModalOpen(false)} 
                />
            )}

            {/* AI 視覺擷取 Modal */}
            {isCaptureModalOpen && (
                <AIOcrCaptureModal
                    theme={currentTheme}
                    onAnalysisSuccess={handleAiCaptureSuccess}
                    onClose={() => setIsCaptureModalOpen(false)}
                />
            )}
        </div>
    );
}

export default App;
</file>

<file path="src/index.css">
@tailwind base;
@tailwind components;
@tailwind utilities;
</file>

<file path="src/index.js">
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
</file>

<file path=".gitignore">
node_modules
</file>

<file path="netlify.toml">
# netlify.toml

# 這個設定告訴 Netlify 我們的 Serverless Functions 存放在哪個目錄
[functions]
  directory = "netlify/functions/"

# 這個設定告訴 Netlify 在建置專案時要執行的指令以及要發布的目錄
[build]
  command = "npm run build"
  publish = "build"
</file>

<file path="package.json">
{
  "name": "barcode-pricing-comparator",
  "version": "1.0.0",
  "description": "比價神器 - 條碼掃描與價格比較應用",
  "main": "index.js",
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "dependencies": {
    "autoprefixer": "^10.4.16",
    "axios": "^1.5.1",
    "firebase": "^10.5.0",
    "lucide-react": "^0.545.0",
    "node-fetch": "^2.7.0",
    "postcss": "^8.4.31",
    "quagga": "^0.12.1",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-scripts": "5.0.1",
    "tailwindcss": "^3.3.3",
    "uuid": "^9.0.1"
  },
  "devDependencies": {
    "@babel/plugin-transform-class-properties": "^7.23.3",
    "@babel/plugin-transform-nullish-coalescing-operator": "^7.23.3",
    "@babel/plugin-transform-numeric-separator": "^7.23.3",
    "@babel/plugin-transform-optional-chaining": "^7.23.3",
    "@babel/plugin-transform-private-methods": "^7.23.3",
    "@babel/plugin-transform-private-property-in-object": "^7.23.3",
    "@types/react": "^18.2.25",
    "@types/react-dom": "^18.2.10",
    "eslint": "^8.57.1",
    "eslint-config-react-app": "^7.0.1"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
</file>

<file path="README.md">
"# Barcodepricing" 
"# Barcodepricing"
</file>

<file path="tailwind.config.js">
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}
</file>

<file path="參考程式.txt">
import React, { useState, useEffect, useRef } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth';
import { getFirestore, doc, setDoc, getDoc, collection, query, where, getDocs, addDoc } from 'firebase/firestore'; 

// --- Firebase Configuration and Initialization ---
const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

// The Quagga global object is assumed to be available via CDN script injection
const Quagga = window.Quagga; 

// Hardcoded list of local supermarkets for demonstration
const STORES = ['家樂福 (Carrefour)', '全聯 (PX Mart)', '大潤發 (RT-Mart)', '美廉社 (Simple Mart)', '其他'];

// Simple DJB2-like hash function optimized for speed and consistency
function generateNumericalID(str) {
    let hash = 5381;
    let i = str.length;

    while (i) {
        hash = (hash * 33) ^ str.charCodeAt(--i);
    }

    return hash >>> 0;
}

// Custom hook to handle Firebase setup and user authentication
const useFirebase = () => {
    const [db, setDb] = useState(null);
    const [userId, setUserId] = useState(null);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        if (Object.keys(firebaseConfig).length === 0) {
            console.error("Firebase configuration is missing.");
            setIsLoading(false);
            return;
        }

        try {
            const app = initializeApp(firebaseConfig);
            const authInstance = getAuth(app);
            const dbInstance = getFirestore(app);
            setDb(dbInstance);

            const unsubscribe = onAuthStateChanged(authInstance, async (user) => {
                if (user) {
                    setUserId(user.uid);
                    setIsLoading(false);
                } else {
                    try {
                        if (initialAuthToken) {
                            await signInWithCustomToken(authInstance, initialAuthToken);
                        } else {
                            await signInAnonymously(authInstance);
                        }
                    } catch (error) {
                        console.error("Firebase sign-in failed:", error);
                        setIsLoading(false);
                    }
                }
            });

            return () => unsubscribe();
        } catch (error) {
            console.error("Firebase initialization failed:", error);
            setIsLoading(false);
        }
    }, []);

    return { db, userId, isLoading };
};

// Utility function to convert File to Base64
const fileToBase64 = (file) => {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = () => resolve(reader.result.split(',')[1]); // Only data part
        reader.onerror = (error) => reject(error);
    });
};

// Main App Component
const App = () => {
    const { db, userId, isLoading } = useFirebase();
    const [barcodeInput, setBarcodeInput] = useState('');
    const [numericalID, setNumericalID] = useState(null);
    const [statusMessage, setStatusMessage] = useState('等待輸入或啟用相機...');
    const [isScanning, setIsScanning] = useState(false);
    const [isDetected, setIsDetected] = useState(false);
    const [isOCRCaptureMode, setIsOCRCaptureMode] = useState(false); // NEW: OCR Mode state
    const [isOCRLoading, setIsOCRLoading] = useState(false); // NEW: OCR Loading state
    
    // Product Master Data States
    const [productName, setProductName] = useState('');
    const [isProductExist, setIsProductExist] = useState(false);

    // Price Record States (Current Scan)
    const [currentStore, setCurrentStore] = useState(STORES[0]);
    const [currentPrice, setCurrentPrice] = useState('');
    const [currentDiscount, setCurrentDiscount] = useState('');
    
    // Comparison Results State
    const [comparisonData, setComparisonData] = useState([]); 
    const [bestDeal, setBestDeal] = useState(null); 

    const scannerRef = useRef(null);
    const fileInputRef = useRef(null);

    // Function to reset all product states
    const resetStates = () => {
        setNumericalID(null);
        setProductName('');
        setBarcodeInput('');
        setCurrentPrice('');
        setCurrentDiscount('');
        setIsProductExist(false);
        setComparisonData([]);
        setBestDeal(null);
        setIsOCRCaptureMode(false); // Reset OCR mode
    }

    // --- Gemini OCR Image Analysis Logic ---
    const performOCRAnalysis = async (file) => {
        if (!file) return;

        setIsOCRLoading(true);
        setStatusMessage('🚀 正在上傳圖片並進行 Gemini 圖像分析 (OCR)...');

        try {
            const base64ImageData = await fileToBase64(file);
            
            const systemPrompt = "你是一個專業的價格標籤分析師。請仔細分析提供的圖像，識別商店名稱、商品的標價（僅需數字部分，小數點後兩位），以及任何相關的優惠或折扣資訊。請以 JSON 格式輸出結果，不要添加任何解釋性文字。如果無法識別，請使用空字串或 0。";
            const userQuery = "請從這張圖片中提取商店名稱、標價和優惠資訊。";
            
            const payload = {
                contents: [
                    {
                        role: "user",
                        parts: [
                            { text: userQuery },
                            {
                                inlineData: {
                                    mimeType: file.type,
                                    data: base64ImageData
                                }
                            }
                        ]
                    }
                ],
                systemInstruction: {
                    parts: [{ text: systemPrompt }]
                },
                generationConfig: {
                    responseMimeType: "application/json",
                    responseSchema: {
                        type: "OBJECT",
                        properties: {
                            "storeName": { "type": "STRING" },
                            "price": { "type": "NUMBER" },
                            "discountDetails": { "type": "STRING" }
                        },
                        "propertyOrdering": ["storeName", "price", "discountDetails"]
                    }
                }
            };

            const apiKey = "";
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

            // --- Exponential Backoff for API Call ---
            const maxRetries = 5;
            let attempt = 0;
            let result;

            while (attempt < maxRetries) {
                try {
                    const response = await fetch(apiUrl, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });

                    if (!response.ok) {
                        if (response.status === 429) { // Rate limit hit
                            const delay = Math.pow(2, attempt) * 1000 + Math.random() * 1000;
                            await new Promise(resolve => setTimeout(resolve, delay));
                            attempt++;
                            continue; // Retry
                        }
                        throw new Error(`API call failed with status: ${response.status}`);
                    }
                    
                    result = await response.json();
                    break; // Success
                } catch (error) {
                    console.error(`Attempt ${attempt + 1} failed:`, error.message);
                    if (attempt === maxRetries - 1) throw error;
                    const delay = Math.pow(2, attempt) * 1000 + Math.random() * 1000;
                    await new Promise(resolve => setTimeout(resolve, delay));
                    attempt++;
                }
            }
            // --- End Exponential Backoff ---

            const jsonText = result?.candidates?.[0]?.content?.parts?.[0]?.text;
            if (!jsonText) {
                throw new Error("API response was empty or malformed.");
            }
            
            const ocrData = JSON.parse(jsonText);
            
            // Update states with OCR results
            if (ocrData.storeName) setCurrentStore(ocrData.storeName);
            if (ocrData.price && !isNaN(parseFloat(ocrData.price))) setCurrentPrice(ocrData.price.toFixed(2));
            if (ocrData.discountDetails) setCurrentDiscount(ocrData.discountDetails);
            
            setIsOCRCaptureMode(false);
            setStatusMessage(`✅ 圖像分析完成。結果已自動填入：${ocrData.storeName} $${ocrData.price}`);
            
        } catch (e) {
            console.error("OCR analysis error: ", e);
            setStatusMessage(`🚫 圖像分析失敗。請手動輸入資訊。錯誤: ${e.message}`);
            setIsOCRCaptureMode(false);
        } finally {
            setIsOCRLoading(false);
        }
    };
    
    // Handler for file input change
    const handleFileChange = (event) => {
        const file = event.target.files[0];
        if (file) {
            performOCRAnalysis(file);
        }
    };
    
    // --- Price Comparison Logic (Unchanged) ---
    const fetchComparisonData = async (id, currentRecord) => {
        if (!db) return;

        const pricesRef = collection(db, `artifacts/${appId}/public/data/price_records`);
        const q = query(pricesRef, where('numericalID', '==', id)); 
        
        try {
            const querySnapshot = await getDocs(q);
            let records = [];
            
            querySnapshot.forEach((doc) => {
                records.push({ id: doc.id, ...doc.data() });
            });

            if (currentRecord) {
                records.push({ ...currentRecord, isCurrentScan: true, id: 'current_scan' });
            }

            let lowestPriceRecord = null;
            if (records.length > 0) {
                lowestPriceRecord = records.reduce((min, record) => {
                    return record.price < min.price ? record : min;
                }, records[0]);
            }
            
            setComparisonData(records);
            setBestDeal(lowestPriceRecord);

            return { lowestPriceRecord, records };

        } catch (e) {
            console.error("Error fetching comparison data: ", e);
            setStatusMessage('🚫 歷史價格比較失敗。');
            return { lowestPriceRecord: null, records: [] };
        }
    }

    // --- Core Logic: Scan -> Lookup -> Compare (Unchanged) ---
    const processBarcode = async (rawBarcodeData) => {
        if (!rawBarcodeData.trim()) return;

        resetStates(); 
        
        const calculatedNumericalID = generateNumericalID(rawBarcodeData);
        setBarcodeInput(rawBarcodeData);
        setNumericalID(calculatedNumericalID);
        
        setIsDetected(true);
        setTimeout(() => setIsDetected(false), 500); 

        setStatusMessage(`數值 ID: ${calculatedNumericalID} 已生成。正在查詢產品主檔...`);

        if (db && userId) {
            try {
                // 1. Lookup Product Master Data
                const productDocRef = doc(db, `artifacts/${appId}/public/data/products`, calculatedNumericalID.toString());
                const productSnap = await getDoc(productDocRef);

                if (productSnap.exists()) {
                    const existingData = productSnap.data();
                    setProductName(existingData.productName || '未命名產品');
                    setIsProductExist(true);
                    setStatusMessage(`產品: ${existingData.productName} 已載入。請進行 OCR 或手動輸入價格。`);
                } else {
                    // New product
                    setIsProductExist(false);
                    setStatusMessage('偵測到新產品。請先輸入產品名稱，然後進行 OCR 或輸入價格紀錄。');
                }

                // 2. Fetch all historical prices for comparison immediately
                await fetchComparisonData(calculatedNumericalID);

            } catch (e) {
                console.error("Error accessing product master data: ", e);
                setStatusMessage('數據庫查詢失敗，但數值 ID 已在本地生成。');
            }
        }
    };
    
    // --- Save Price Record Logic (Unchanged) ---
    const savePriceRecord = async () => {
        if (!db || !userId || !barcodeInput.trim() || !productName.trim() || isNaN(parseFloat(currentPrice))) {
            setStatusMessage('錯誤：請確保產品名稱和價格皆已輸入。');
            return;
        }

        const priceValue = parseFloat(currentPrice);
        const rawBarcodeData = barcodeInput.trim();
        const calculatedNumericalID = generateNumericalID(rawBarcodeData);

        const newPriceRecord = {
            numericalID: calculatedNumericalID,
            productName: productName.trim(),
            storeName: currentStore,
            price: priceValue,
            discountDetails: currentDiscount.trim(),
            timestamp: new Date().toISOString(),
            recordedBy: userId,
        };

        try {
            // Check if product master data needs creation/update
            const productDocRef = doc(db, `artifacts/${appId}/public/data/products`, calculatedNumericalID.toString());
            if (!isProductExist) {
                 await setDoc(productDocRef, {
                    numericalID: calculatedNumericalID,
                    barcodeData: rawBarcodeData,
                    productName: productName.trim(),
                    createdAt: new Date().toISOString(),
                    createdBy: userId,
                });
                setIsProductExist(true); 
            } 

            // 1. Save the new price record
            await addDoc(collection(db, `artifacts/${appId}/public/data/price_records`), newPriceRecord);

            // 2. Re-fetch and compare with the new record
            await fetchComparisonData(calculatedNumericalID, newPriceRecord);
            
            setStatusMessage(`🎉 價格紀錄已儲存。當前紀錄 $${priceValue}。`);

        } catch (e) {
            console.error("Error saving price record: ", e);
            setStatusMessage('🚫 價格資料儲存失敗。');
        }
    }
    
    // --- Input Handlers (Unchanged) ---
    const handleManualScan = () => {
        if (barcodeInput.trim()) {
            processBarcode(barcodeInput);
        }
    };

    const handleKeyDown = (e) => {
        if (e.key === 'Enter') {
            e.preventDefault();
            handleManualScan();
        }
    };

    // --- QuaggaJS/Scanning Logic (Unchanged) ---
    useEffect(() => {
        if (!isScanning && Quagga && typeof Quagga.stop === 'function') {
            Quagga.stop();
        }

        if (isScanning && scannerRef.current && Quagga) {
            resetStates(); 
            setStatusMessage('相機啟用中，請對準條碼...');
            
            Quagga.init({
                inputStream: {
                    name: "Live",
                    type: "LiveStream",
                    target: scannerRef.current,
                    constraints: { facingMode: "environment" },
                },
                decoder: {
                    readers: ["ean_reader", "code_128_reader", "code_39_reader", "upc_reader"],
                    multiple: false 
                },
                locator: { patchSize: "medium", halfSample: true },
                numOfWorkers: navigator.hardwareConcurrency || 2,
                locate: true,
            }, (err) => {
                if (err) {
                    console.error("Quagga initialization error:", err);
                    setStatusMessage(`相機初始化失敗: ${err.name}。請檢查權限。`);
                    setIsScanning(false);
                    return;
                }
                Quagga.start();
                setStatusMessage('相機掃描中... 嘗試辨識一維條碼。');
            });

            Quagga.onDetected((data) => {
                const scannedCode = data.codeResult.code;
                if (scannedCode) {
                    Quagga.stop(); 
                    setIsScanning(false);
                    processBarcode(scannedCode);
                }
            });

            return () => {
                if (Quagga && typeof Quagga.stop === 'function') {
                    Quagga.stop();
                    Quagga.offDetected();
                }
            };
        }
    }, [isScanning, db, userId]);

    if (isLoading) {
        return (
            <div className="flex items-center justify-center min-h-screen bg-gray-50">
                <p className="text-xl font-medium text-indigo-600">載入中...</p>
            </div>
        );
    }

    // --- UI Components ---
    
    const ComparisonDisplay = () => {
        if (comparisonData.length === 0) return null;
        if (!bestDeal) return <p className="text-blue-600">目前沒有其他歷史價格紀錄。</p>;

        const currentPriceFloat = parseFloat(currentPrice);
        const isBestDeal = currentPriceFloat > 0 && currentPriceFloat === bestDeal.price;
        
        let comparisonMessage;
        if (currentPriceFloat > 0 && isBestDeal) {
            comparisonMessage = <p className="text-lg font-bold text-green-700">🎉 您當前掃描的價格就是目前資料庫中的最優惠價格!</p>;
        } else if (currentPriceFloat > 0 && currentPriceFloat > bestDeal.price) {
            comparisonMessage = (
                <div className="text-lg font-bold text-red-700 space-y-2">
                    <p>🚨 **注意: 價格不是最低!**</p>
                    <div className="bg-red-50 p-3 rounded-lg border-l-4 border-red-500">
                        <p className="font-normal text-sm text-gray-700">目前最優惠選項是:</p>
                        <p className="font-extrabold text-xl text-red-800">
                            ${bestDeal.price.toFixed(2)} @ {bestDeal.storeName}
                        </p>
                        {bestDeal.discountDetails && <p className="text-xs text-red-600">優惠: {bestDeal.discountDetails}</p>}
                    </div>
                </div>
            );
        } else {
             comparisonMessage = <p className="text-lg font-bold text-blue-700">ℹ️ 已載入歷史價格，請輸入當前價格進行比較。</p>;
        }

        return (
            <div className="pt-4 border-t border-gray-200 mt-4 space-y-4">
                <h3 className="text-xl font-bold text-gray-900">3. 比價分析結果</h3>
                
                {comparisonMessage}

                <details className="text-sm text-gray-600 p-2 bg-gray-50 rounded-lg cursor-pointer">
                    <summary className="font-semibold text-gray-700">檢視所有 {comparisonData.length} 筆歷史紀錄</summary>
                    <ul className="mt-2 space-y-1">
                        {comparisonData
                            .sort((a, b) => a.price - b.price)
                            .map((record, index) => (
                            <li key={index} className={`flex justify-between items-center py-1 px-2 rounded-md ${record.price === bestDeal.price ? 'bg-yellow-100 font-bold' : 'hover:bg-gray-100'}`}>
                                <span>
                                    {record.storeName} ({new Date(record.timestamp).toLocaleDateString()})
                                </span>
                                <span className="text-lg font-mono">
                                    ${record.price.toFixed(2)}
                                </span>
                            </li>
                        ))}
                    </ul>
                </details>
            </div>
        );
    }
    
    // --- Render ---

    return (
        <div className="min-h-screen flex items-center justify-center p-4 bg-gray-100 font-inter">
            <div className="w-full max-w-lg bg-white shadow-2xl rounded-xl p-8 space-y-6 transform transition duration-500 hover:scale-[1.02]">
                <header className="text-center border-b pb-4">
                    <h1 className="text-3xl font-extrabold text-gray-900">🛒 條碼比價神器 (OCR 啟動)</h1>
                    <p className="text-sm text-gray-500 mt-1">透過 AI 圖像分析自動識別商店與價格</p>
                </header>

                <div className="space-y-4">
                    {/* Mode Toggle Button */}
                    <button
                        onClick={() => {
                            if (isScanning && Quagga) Quagga.stop();
                            setIsScanning(!isScanning);
                            setIsDetected(false); 
                            resetStates();
                        }}
                        className={`w-full flex items-center justify-center px-6 py-3 text-base font-medium rounded-lg shadow-md transition duration-150 ease-in-out transform hover:scale-[1.01] ${
                            isScanning ? 'bg-red-500 text-white hover:bg-red-600' : 'bg-indigo-600 text-white hover:bg-indigo-700'
                        }`}
                    >
                        {isScanning ? '停止掃描 / 切換至手動輸入' : '啟用相機條碼掃描'}
                    </button>
                    
                    {/* Camera/Manual Input */}
                    {(isScanning || !numericalID) && (
                        <div className="space-y-4">
                             {/* Camera Scanner View */}
                            {isScanning && (
                                <div className={`relative w-full aspect-video bg-gray-900 rounded-lg overflow-hidden border-4 transition duration-300 ${isDetected ? 'border-green-500 shadow-xl shadow-green-500/50' : 'border-indigo-500'}`}>
                                    <div ref={scannerRef} style={{ width: '100%', height: '100%', position: 'absolute' }} />
                                    
                                    <div className="absolute inset-0 flex items-center justify-center pointer-events-none">
                                        <div className="w-3/4 h-1/2 border-4 border-white border-dashed opacity-80 rounded-lg relative">
                                            <div className={`absolute top-1/2 left-0 right-0 h-0.5 transform -translate-y-1/2 transition duration-100 ${
                                                isDetected ? 'bg-green-500' : 'bg-red-500 animate-pulse'
                                            }`} 
                                            ></div>
                                        </div>
                                    </div>
                                    
                                    <div className="absolute bottom-0 left-0 right-0 text-center text-white text-sm font-semibold p-2 bg-gray-900/60">
                                        {statusMessage}
                                    </div>
                                </div>
                            )}
                            
                            {/* Manual Input View */}
                            {!isScanning && (
                                <div className="space-y-4">
                                    <label htmlFor="barcode" className="block text-lg font-medium text-gray-700">
                                        1. 手動輸入條碼數據:
                                    </label>
                                    <input
                                        type="text"
                                        id="barcode"
                                        value={barcodeInput}
                                        onChange={(e) => setBarcodeInput(e.target.value)}
                                        onKeyDown={handleKeyDown}
                                        className="w-full px-4 py-3 border-2 border-indigo-300 rounded-lg shadow-inner focus:ring-indigo-500 focus:border-indigo-500 transition duration-150 text-gray-800"
                                        placeholder="例如: 產品 EAN 碼、SKU 碼..."
                                    />
                                    <button
                                        onClick={handleManualScan}
                                        className="w-full flex items-center justify-center px-6 py-3 border border-transparent text-base font-medium rounded-lg shadow-lg text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-4 focus:ring-indigo-500 focus:ring-opacity-50 transition duration-150 ease-in-out transform hover:translate-y-[-2px] disabled:bg-indigo-400"
                                        disabled={!barcodeInput.trim()}
                                    >
                                        查詢/生成數值 ID
                                    </button>
                                </div>
                            )}
                        </div>
                    )}
                </div>

                {/* 產品資料區 - 只有成功掃描後才顯示 */}
                {numericalID !== null && (
                    <div className="border-t pt-6 space-y-4">
                        <h2 className="text-xl font-bold text-gray-900">
                            2. 產品資料與價格紀錄
                        </h2>
                        
                        <div className="bg-indigo-50 border border-indigo-300 p-4 rounded-lg space-y-2">
                            <p className="text-lg font-extrabold text-indigo-800 break-words">
                                品名: {productName || '（請輸入名稱並儲存紀錄）'}
                            </p>
                            <p className="text-xs text-indigo-700">
                                數值 ID: {numericalID} | 原始條碼: {barcodeInput}
                            </p>
                            {!isProductExist && (
                                <InputField 
                                    label="請為新產品命名 (必填)"
                                    value={productName}
                                    onChange={setProductName}
                                    type="text"
                                    placeholder="例如: 王子麵-原味"
                                />
                            )}
                        </div>

                        {/* OCR Capture Toggle */}
                         <button
                            onClick={() => {
                                setIsOCRCaptureMode(true);
                                // Trigger file input click when entering OCR mode
                                if (fileInputRef.current) {
                                    fileInputRef.current.click();
                                }
                            }}
                            className="w-full flex items-center justify-center px-6 py-3 text-base font-medium rounded-lg shadow-md text-white bg-pink-500 hover:bg-pink-600 transition duration-150 transform hover:translate-y-[-1px]"
                            disabled={isOCRLoading}
                        >
                            {isOCRLoading ? 'AI 圖像分析中...' : '📸 拍照/上傳價格標籤進行 OCR'}
                        </button>
                        
                        {/* Hidden File Input for Image Capture */}
                        <input
                            type="file"
                            accept="image/*"
                            capture="environment" // Hint to use back camera on mobile
                            onChange={handleFileChange}
                            ref={fileInputRef}
                            style={{ display: 'none' }}
                        />

                        {/* Price Record Inputs (Manual/OCR Output) */}
                        <div className="space-y-3 pt-4 border-t">
                             <h3 className="text-lg font-semibold text-gray-700">新增當前價格紀錄 (可手動修改 OCR 結果)</h3>
                            
                            <InputField 
                                label="商店 (Store) - 來自 OCR"
                                value={currentStore}
                                onChange={setCurrentStore}
                                type="text" // Changed from SelectField to allow OCR output
                                placeholder="例如: 家樂福"
                            />
                            <InputField 
                                label="價格 (Price) - 來自 OCR / 必填"
                                value={currentPrice}
                                onChange={setCurrentPrice}
                                type="number"
                                placeholder="例如: 99.00"
                            />
                            <InputField 
                                label="優惠細節 (Discount Details) - 來自 OCR"
                                value={currentDiscount}
                                onChange={setCurrentDiscount}
                                type="text"
                                placeholder="例如: 買一送一, 第二件六折"
                            />
                        </div>
                        
                        {/* Comparison Display */}
                        <ComparisonDisplay />

                        <button
                            onClick={savePriceRecord}
                            className={`w-full flex items-center justify-center px-6 py-3 text-base font-medium rounded-lg shadow-lg text-white transition duration-150 ease-in-out transform hover:translate-y-[-2px] bg-green-600 hover:bg-green-700 disabled:bg-gray-400`}
                            disabled={!currentPrice.trim() || isNaN(parseFloat(currentPrice)) || !productName.trim()}
                        >
                            儲存當前價格紀錄並比價
                        </button>
                    </div>
                )}
                
                {/* 狀態顯示區 */}
                <div className="pt-4 border-t">
                     <div className={`p-3 text-sm rounded-lg ${
                        statusMessage.includes('失敗') ? 'bg-red-100 text-red-800' : 
                        statusMessage.includes('注意') ? 'bg-yellow-100 text-yellow-800' : 
                        statusMessage.includes('已載入') || statusMessage.includes('完成') ? 'bg-green-100 text-green-800' :
                        'bg-blue-100 text-blue-800'
                    }`}>
                        <p className="font-semibold">當前狀態:</p>
                        <p>{statusMessage}</p>
                    </div>
                </div>
            </div>
        </div>
    );
};

// Simple reusable input component
const InputField = ({ label, value, onChange, type, placeholder }) => (
    <div>
        <label className="block text-sm font-medium text-gray-700">
            {label}
        </label>
        <input
            type={type}
            value={value}
            onChange={(e) => onChange(e.target.value)}
            className="mt-1 w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
            placeholder={placeholder}
        />
    </div>
);

// SelectField is no longer used for Store, changed to InputField for direct OCR output.
// Kept here for reference but removed from the main component's render.
const SelectField = ({ label, value, onChange, options }) => (
    <div>
        <label className="block text-sm font-medium text-gray-700">
            {label}
        </label>
        <select
            value={value}
            onChange={(e) => onChange(e.target.value)}
            className="mt-1 w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm bg-white"
        >
            {options.map((option) => (
                <option key={option} value={option}>
                    {option}
                </option>
            ))}
        </select>
    </div>
);

export default App;
</file>

<file path="參考程式2.txt">
import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth';
import { 
    getFirestore, 
    doc, 
    getDoc, 
    setDoc, 
    collection, 
    query, 
    where, 
    addDoc, 
    getDocs, 
    setLogLevel,
    Timestamp 
} from 'firebase/firestore';
import { Upload, Camera, QrCode, RotateCcw, PaintBucket, DollarSign, Barcode, ClipboardCheck, Search } from 'lucide-react';

// 設定 Firebase 日誌級別 (除錯用)
// setLogLevel('debug'); 

// -----------------------------------------------------------------------------
// 1. 核心設定與工具函數 (Core Setup & Utilities)
// -----------------------------------------------------------------------------

// 獲取 Canvas 環境注入的變數
const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

/**
 * DJB2 雜湊算法：將條碼字串轉換為數值 ID (numericalID)。
 * @param {string} str - 原始條碼字串
 * @returns {number} - 32位元無符號整數
 */
function djb2Hash(str) {
    let hash = 5381;
    for (let i = 0; i < str.length; i++) {
        // hash * 33 + charCode
        hash = ((hash << 5) + hash) + str.charCodeAt(i);
    }
    // 轉換為無符號 32 位整數
    return hash >>> 0;
}

// -----------------------------------------------------------------------------
// 2. 主題配置 (Theming Configuration) - 依據 SPEC 3.4
// -----------------------------------------------------------------------------

// 定義所有可選主題及其 Tailwind 顏色類別
const THEMES = {
    'Default (Indigo)': { 
        primary: 'bg-indigo-600', 
        light: 'bg-indigo-100', 
        hover: 'hover:bg-indigo-700', 
        border: 'border-indigo-600',
        text: 'text-indigo-600',
        color: 'indigo'
    },
    '海洋藍 (Ocean Blue)': { 
        primary: 'bg-blue-600', 
        light: 'bg-blue-100', 
        hover: 'hover:bg-blue-700', 
        border: 'border-blue-600',
        text: 'text-blue-600',
        color: 'blue'
    },
    '森林綠 (Forest Green)': { 
        primary: 'bg-green-600', 
        light: 'bg-green-100', 
        hover: 'hover:bg-green-700', 
        border: 'border-green-600',
        text: 'text-green-600',
        color: 'green'
    },
    '夕陽紅 (Sunset Red)': { 
        primary: 'bg-red-600', 
        light: 'bg-red-100', 
        hover: 'hover:bg-red-700', 
        border: 'border-red-600',
        text: 'text-red-600',
        color: 'red'
    },
    '活力橙 (Vibrant Orange)': { 
        primary: 'bg-orange-600', 
        light: 'bg-orange-100', 
        hover: 'hover:bg-orange-700', 
        border: 'border-orange-600',
        text: 'text-orange-600',
        color: 'orange'
    },
    '薰衣草紫 (Lavender)': { 
        primary: 'bg-purple-600', 
        light: 'bg-purple-100', 
        hover: 'hover:bg-purple-700', 
        border: 'border-purple-600',
        text: 'text-purple-600',
        color: 'purple'
    },
};

const DEFAULT_THEME_KEY = 'Default (Indigo)';

// -----------------------------------------------------------------------------
// 3. 自定義 Hook - Firebase 初始化與認證 (useFirebase)
// -----------------------------------------------------------------------------

/**
 * 處理 Firebase 的初始化、認證和狀態管理。
 * @returns {object} 包含 db, auth, userId, isAuthReady, currentTheme, saveUserTheme 等狀態和物件。
 */
function useFirebase() {
    const [db, setDb] = useState(null);
    const [auth, setAuth] = useState(null);
    const [userId, setUserId] = useState(null);
    const [isAuthReady, setIsAuthReady] = useState(false);
    const [currentTheme, setCurrentTheme] = useState(THEMES[DEFAULT_THEME_KEY]);

    // 取得/設定用戶主題的函數
    const getThemeRef = useCallback((dbInstance, uid) => {
        if (!dbInstance || !uid) return null;
        // 遵循 SPEC 4.0: artifacts/{appId}/users/{userId}/preferences/settings
        return doc(dbInstance, 'artifacts', appId, 'users', uid, 'preferences', 'settings');
    }, []);

    // 載入用戶主題
    const loadUserTheme = useCallback(async (dbInstance, uid) => {
        const themeRef = getThemeRef(dbInstance, uid);
        if (!themeRef) return;

        try {
            const docSnap = await getDoc(themeRef);
            if (docSnap.exists()) {
                const savedThemeKey = docSnap.data().theme;
                const themeData = THEMES[savedThemeKey] || THEMES[DEFAULT_THEME_KEY];
                setCurrentTheme(themeData);
            } else {
                setCurrentTheme(THEMES[DEFAULT_THEME_KEY]);
            }
        } catch (error) {
            console.error("無法載入使用者主題:", error);
            setCurrentTheme(THEMES[DEFAULT_THEME_KEY]);
        }
    }, [getThemeRef]);

    // 儲存用戶主題
    const saveUserTheme = useCallback(async (themeKey) => {
        if (!db || !userId) return;
        const themeRef = getThemeRef(db, userId);

        try {
            const dataToSave = { theme: themeKey };
            // 使用 setDoc 覆蓋/創建文件
            await setDoc(themeRef, dataToSave, { merge: true }); 
            setCurrentTheme(THEMES[themeKey] || THEMES[DEFAULT_THEME_KEY]);
            console.log("主題設定已儲存:", themeKey);
        } catch (error) {
            console.error("無法儲存使用者主題:", error);
        }
    }, [db, userId, getThemeRef]);

    useEffect(() => {
        try {
            const app = initializeApp(firebaseConfig);
            const firestoreDb = getFirestore(app);
            const firebaseAuth = getAuth(app);
            
            setDb(firestoreDb);
            setAuth(firebaseAuth);

            // 設置身份驗證監聽器
            const unsubscribe = onAuthStateChanged(firebaseAuth, async (user) => {
                if (user) {
                    setUserId(user.uid);
                    await loadUserTheme(firestoreDb, user.uid); // 認證後立即載入主題
                } else {
                    // 如果沒有用戶，嘗試使用自定義令牌或匿名登入
                    try {
                        if (initialAuthToken) {
                            const userCredential = await signInWithCustomToken(firebaseAuth, initialAuthToken);
                            setUserId(userCredential.user.uid);
                            await loadUserTheme(firestoreDb, userCredential.user.uid);
                        } else {
                            const userCredential = await signInAnonymously(firebaseAuth);
                            setUserId(userCredential.user.uid);
                            await loadUserTheme(firestoreDb, userCredential.user.uid);
                        }
                    } catch (error) {
                        console.error("Firebase 認證失敗:", error);
                        // 即使認證失敗，也要標記為準備就緒，避免應用程式鎖死
                        setUserId(crypto.randomUUID()); 
                        setCurrentTheme(THEMES[DEFAULT_THEME_KEY]);
                    }
                }
                setIsAuthReady(true);
            });

            return () => unsubscribe();
        } catch (error) {
            console.error("Firebase 初始化失敗:", error);
            setIsAuthReady(true);
        }
    }, [loadUserTheme]);

    return { db, auth, userId, isAuthReady, currentTheme, saveUserTheme };
}

// -----------------------------------------------------------------------------
// 4. 主題選擇元件 (Theme Selector Component)
// -----------------------------------------------------------------------------

/**
 * 顯示主題選擇面板的 Modal 元件。
 */
function ThemeSelector({ theme, saveTheme, onClose }) {
    const handleThemeChange = (themeKey) => {
        saveTheme(themeKey);
    };

    const handleReset = () => {
        saveTheme(DEFAULT_THEME_KEY);
    };

    return (
        <div className="fixed inset-0 bg-gray-900 bg-opacity-75 z-50 flex items-center justify-center p-4">
            <div className="bg-white rounded-xl shadow-2xl w-full max-w-md p-6 transform transition-all">
                <h3 className={`text-xl font-bold ${theme.text} mb-4 border-b pb-2`}>
                    <PaintBucket className="inline-block w-5 h-5 mr-2" />
                    介面配色選項
                </h3>
                
                <div className="grid grid-cols-2 gap-4 mb-6">
                    {Object.keys(THEMES).map((themeKey) => {
                        const themeData = THEMES[themeKey];
                        const isSelected = theme.color === themeData.color;
                        return (
                            <button
                                key={themeKey}
                                onClick={() => handleThemeChange(themeKey)}
                                className={`
                                    p-3 rounded-lg text-white font-medium shadow-md transition-all 
                                    ${themeData.primary} ${themeData.hover} 
                                    ${isSelected ? 'ring-4 ring-offset-2 ring-opacity-70 ring-gray-400' : ''}
                                `}
                                style={{ transform: isSelected ? 'scale(1.05)' : 'scale(1)' }}
                            >
                                {themeKey}
                            </button>
                        );
                    })}
                </div>

                <div className="flex justify-between items-center pt-4 border-t">
                    <button
                        onClick={handleReset}
                        className="flex items-center text-sm font-medium text-gray-600 hover:text-gray-900 transition-colors"
                    >
                        <RotateCcw className="w-4 h-4 mr-1" />
                        清除還原 (預設)
                    </button>
                    <button
                        onClick={onClose}
                        className={`px-4 py-2 text-white font-semibold rounded-lg shadow-lg ${theme.primary} ${theme.hover} transition-all`}
                    >
                        關閉
                    </button>
                </div>
            </div>
        </div>
    );
}

// -----------------------------------------------------------------------------
// 5. 主應用程式元件 (App Component)
// -----------------------------------------------------------------------------

function App() {
    const { db, userId, isAuthReady, currentTheme, saveUserTheme } = useFirebase();
    
    // UI 狀態管理
    const [barcode, setBarcode] = useState('');
    const [productName, setProductName] = useState('');
    const [currentPrice, setCurrentPrice] = useState('');
    const [isThemeModalOpen, setIsThemeModalOpen] = useState(false);
    const [comparisonResult, setComparisonResult] = useState({
        isBest: false,
        bestPrice: null,
        bestStore: null,
        message: '等待比價數據...'
    });
    const [isLoading, setIsLoading] = useState(false); // 通用載入狀態
    const [lookupStatus, setLookupStatus] = useState('ready'); // 'ready', 'searching', 'found', 'new'

    // -----------------------------------------------------------------------------
    // 產品識別邏輯 (新增 - 配合單一步驟需求)
    // -----------------------------------------------------------------------------
    const lookupProduct = useCallback(async (barcodeData) => {
        if (!db || !barcodeData) {
            setProductName('');
            setLookupStatus('ready');
            return;
        }
        
        if (barcodeData.length < 5) return; // 避免過短的輸入觸發查詢

        setLookupStatus('searching');
        const numericalID = djb2Hash(barcodeData);
        
        try {
            // 遵循 SPEC 4.1 路徑: artifacts/{appId}/public/data/products/{numericalID}
            const docRef = doc(db, `artifacts/${appId}/public/data/products`, numericalID.toString());
            const docSnap = await getDoc(docRef);

            if (docSnap.exists()) {
                setProductName(docSnap.data().productName);
                setLookupStatus('found');
                console.log("產品已識別:", docSnap.data().productName);
            } else {
                setProductName('');
                setLookupStatus('new');
                console.log("新產品，請手動輸入名稱。");
            }
        } catch (error) {
            console.error("查詢產品失敗:", error);
            setLookupStatus('ready');
        }
    }, [db]);

    useEffect(() => {
        // 當條碼輸入改變且 Firebase 準備就緒時，觸發產品查詢
        if (barcode.length > 0 && isAuthReady) {
            // 設置一個小的延遲，避免連續輸入時過度觸發 Firestore 讀取
            const timer = setTimeout(() => {
                lookupProduct(barcode);
            }, 500); 
            return () => clearTimeout(timer); // 清除上一個計時器
        }
    }, [barcode, isAuthReady, lookupProduct]);


    // 模擬 OCR 函數 (Placeholder)
    const performOCRAnalysis = useCallback(async (base64Image) => {
        console.log("正在模擬 OCR 分析...");
        // 此處應為真實的 Gemini API 呼叫邏輯 (已在 SPEC 3.2 定義)
        await new Promise(r => setTimeout(r, 1500)); // 模擬 API 延遲

        // 模擬結構化輸出
        return {
            storeName: '模擬超商 (OCR)',
            price: (Math.random() * 50 + 100).toFixed(2), // 隨機價格
            discountDetails: '買二送一優惠 (OCR 模擬)',
        };
    }, []);

    // 儲存並比價函數
    const saveAndComparePrice = useCallback(async () => {
        // 在儲存前，檢查產品主檔是否存在，若不存在則先創建
        const numericalID = djb2Hash(barcode);
        const priceValue = parseFloat(currentPrice);

        if (!userId || !barcode || !productName || isNaN(priceValue)) {
            alert("請確保已輸入條碼、產品名稱和有效價格！");
            return;
        }

        setIsLoading(true);
        
        try {
            // 0. 檢查並創建產品主檔 (如果不存在)
            const productDocRef = doc(db, `artifacts/${appId}/public/data/products`, numericalID.toString());
            const productDocSnap = await getDoc(productDocRef);

            if (!productDocSnap.exists()) {
                await setDoc(productDocRef, {
                    numericalID,
                    barcodeData: barcode,
                    productName,
                    createdAt: new Date().toISOString(),
                });
                console.log("已創建新的產品主檔。");
            }
            
            // 1. 儲存新的價格紀錄 (SPEC 3.3)
            const priceRecord = {
                numericalID,
                productName,
                storeName: comparisonResult.bestStore || "手動輸入",
                price: priceValue,
                discountDetails: "無", // 暫時為無，等待未來 OCR 完善
                timestamp: new Date().toISOString(),
                recordedBy: userId,
            };
            
            // 遵循 SPEC 4.2 路徑
            const recordsRef = collection(db, `artifacts/${appId}/public/data/price_records`);
            await addDoc(recordsRef, priceRecord);
            
            // 2. 執行比價邏輯 (SPEC 3.3) - 查詢所有歷史紀錄
            const q = query(recordsRef, where("numericalID", "==", numericalID));
            const snapshot = await getDocs(q);
            const records = snapshot.docs.map(d => d.data());

            if (records.length <= 1) { // 由於剛儲存了一筆，所以是 <= 1
                setComparisonResult({ isBest: true, message: '這是第一筆紀錄！' });
            } else {
                // 找出所有紀錄中的最低價
                const bestDeal = records.reduce((best, cur) => cur.price < best.price ? cur : best);
                
                // 檢查當前價格是否為最低價
                const isCurrentBest = priceRecord.price <= bestDeal.price;
                setComparisonResult({
                    isBest: isCurrentBest,
                    bestPrice: bestDeal.price,
                    bestStore: bestDeal.storeName,
                    message: isCurrentBest 
                        ? '恭喜！這是目前紀錄中的最低價！' 
                        : `非最低價。歷史最低價為 $${bestDeal.price} (商店: ${bestDeal.storeName})`
                });
            }

        } catch (error) {
            console.error("儲存或比價失敗:", error);
            alert("數據操作失敗，請檢查網路或權限。");
        } finally {
            setIsLoading(false);
        }
    }, [db, userId, barcode, productName, currentPrice, comparisonResult.bestStore]);

    // 主題變數，用於動態 Tailwind 類別
    const themePrimary = currentTheme.primary;
    const themeText = currentTheme.text;
    const themeLight = currentTheme.light;
    const themeBorder = currentTheme.border;

    // 根據查詢狀態顯示產品名稱提示
    const productNamePlaceholder = useMemo(() => {
        switch(lookupStatus) {
            case 'searching':
                return '正在查詢產品資料...';
            case 'found':
                return '產品名稱已自動載入';
            case 'new':
                return '產品不存在，請手動輸入名稱';
            default:
                return '請先輸入條碼或掃描條碼';
        }
    }, [lookupStatus]);


    if (!isAuthReady) {
        return (
            <div className="flex items-center justify-center min-h-screen bg-gray-50">
                <p className="text-xl text-gray-700">正在連接比價系統...</p>
            </div>
        );
    }

    return (
        // 應用程式主容器，使用動態主題色
        <div className={`min-h-screen p-4 sm:p-8 ${themeLight}`}>
            <div className="max-w-xl mx-auto">
                <header className="flex justify-between items-center mb-6 border-b pb-4">
                    <h1 className={`text-3xl font-extrabold ${themeText} flex items-center`}>
                        <Barcode className="w-8 h-8 mr-2" />
                        條碼比價神器
                    </h1>
                    <div className="flex items-center space-x-3">
                        {/* 主題切換按鈕 */}
                        <button 
                            onClick={() => setIsThemeModalOpen(true)}
                            className={`p-2 rounded-full text-white shadow-md transition-all ${themePrimary} hover:opacity-80`}
                            title="設定介面主題"
                        >
                            <PaintBucket className="w-5 h-5" />
                        </button>
                        <p className="text-sm text-gray-500 hidden sm:block">用戶 ID: {userId}</p>
                    </div>
                </header>

                {/* 整合流程卡片：產品識別、價格紀錄與 OCR */}
                <div className={`p-6 rounded-xl shadow-2xl bg-white border-t-4 ${themeBorder}`}>
                    <h2 className={`text-xl font-semibold ${themeText} mb-6 flex items-center`}>
                        <Search className="w-5 h-5 mr-2" /> 
                        產品識別、價格紀錄與比價
                    </h2>
                    
                    {/* 條碼輸入區 */}
                    <div className="mb-6">
                        <label className="block text-gray-700 font-medium mb-1">條碼數據 (Barcode Data)</label>
                        <input
                            type="text"
                            value={barcode}
                            onChange={(e) => setBarcode(e.target.value)}
                            placeholder="掃描或手動輸入條碼 (EAN/UPC)"
                            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition"
                        />
                    </div>
                    
                    {/* 產品名稱區 - 配合自動查詢 */}
                    <div className="mb-6">
                        <label className="block text-gray-700 font-medium mb-1">產品名稱 (Product Name)</label>
                        <input
                            type="text"
                            value={productName}
                            onChange={(e) => setProductName(e.target.value)}
                            placeholder={productNamePlaceholder}
                            className={`w-full p-3 border border-gray-300 rounded-lg transition 
                                ${lookupStatus === 'found' ? 'bg-green-50' : lookupStatus === 'new' ? 'bg-yellow-50' : ''}`}
                            readOnly={lookupStatus === 'found'} // 找到後鎖定
                        />
                        <p className="text-sm text-gray-500 mt-1">
                            數值 ID (Hash): {barcode ? djb2Hash(barcode) : '尚未計算'}
                        </p>
                    </div>

                    {/* 價格與商店輸入/OCR 區 */}
                    <div className="grid grid-cols-2 gap-4 mb-4">
                        <div>
                            <label className="block text-gray-700 font-medium mb-1">標價 ($)</label>
                            <input
                                type="number"
                                value={currentPrice}
                                onChange={(e) => setCurrentPrice(e.target.value)}
                                placeholder="價格 (手動輸入)"
                                className="w-full p-3 border border-gray-300 rounded-lg"
                            />
                        </div>
                        <div>
                            <label className="block text-gray-700 font-medium mb-1">商店名稱</label>
                            <input
                                type="text"
                                value={comparisonResult.bestStore || ''} // 這裡用來顯示 OCR 或手動輸入的商店
                                onChange={(e) => setComparisonResult(prev => ({ ...prev, bestStore: e.target.value }))}
                                placeholder="商店名稱"
                                className="w-full p-3 border border-gray-300 rounded-lg"
                            />
                        </div>
                    </div>

                    {/* 動作按鈕群組 */}
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                        {/* 條碼掃描 */}
                        <button 
                            className={`p-3 rounded-lg text-white font-semibold shadow-lg transition-all bg-gray-500 hover:bg-gray-600`}
                            onClick={() => alert('QuaggaJS 條碼掃描功能 Placeholder')}
                        >
                            <Camera className="inline-block w-5 h-5 mr-2" /> 啟動條碼掃描
                        </button>
                        
                        {/* 價格 OCR */}
                        <button 
                            className={`p-3 rounded-lg text-white font-semibold shadow-lg transition-all ${themePrimary} hover:opacity-80`}
                            onClick={() => document.getElementById('ocr-upload').click()}
                            disabled={isLoading}
                        >
                            <Upload className="inline-block w-5 h-5 mr-2" /> 
                            {isLoading ? 'OCR 分析中...' : '拍照/OCR 價格標籤'}
                        </button>
                        <input
                            type="file"
                            id="ocr-upload"
                            accept="image/*"
                            onChange={async (e) => {
                                const file = e.target.files[0];
                                if (!file) return;

                                setIsLoading(true);
                                try {
                                    const reader = new FileReader();
                                    reader.onloadend = async () => {
                                        const base64Image = reader.result.split(',')[1];
                                        const result = await performOCRAnalysis(base64Image);
                                        
                                        // 自動填入 OCR 結果
                                        setCurrentPrice(result.price);
                                        setComparisonResult(prev => ({ ...prev, bestStore: result.storeName })); 
                                        
                                        alert(`OCR 成功！價格: $${result.price}, 商店: ${result.storeName}`);
                                    };
                                    reader.readAsDataURL(file);
                                } catch (error) {
                                    alert(`OCR 失敗: ${error.message}`);
                                } finally {
                                    setIsLoading(false);
                                }
                            }}
                            className="hidden"
                        />
                    </div>
                    
                    {/* 儲存紀錄並比價 */}
                    <button 
                        className={`w-full mt-4 p-3 rounded-lg text-white font-semibold shadow-lg transition-all bg-emerald-500 hover:bg-emerald-600`}
                        onClick={saveAndComparePrice}
                        disabled={isLoading}
                    >
                        <ClipboardCheck className="inline-block w-5 h-5 mr-2" /> 
                        {isLoading ? '儲存並比價中...' : '儲存紀錄並比價'}
                    </button>
                </div>

                {/* 比價結果顯示區 */}
                <div className="mt-8">
                    <h2 className={`text-xl font-semibold ${themeText} mb-4 flex items-center`}>
                        <DollarSign className="w-5 h-5 mr-2" />
                        比價結果
                    </h2>
                    <div className={`p-6 rounded-xl shadow-xl border-2 ${comparisonResult.isBest ? 'border-green-500 bg-green-50' : 'border-yellow-500 bg-yellow-50'}`}>
                        <p className={`text-lg font-bold ${comparisonResult.isBest ? 'text-green-700' : 'text-yellow-700'}`}>
                            {comparisonResult.message}
                        </p>
                        {comparisonResult.bestPrice && (
                            <p className="text-sm text-gray-600 mt-2">
                                歷史最低價: ${comparisonResult.bestPrice}
                            </p>
                        )}
                    </div>
                </div>
            </div>

            {/* 主題選擇 Modal - 依據 SPEC 3.4 */}
            {isThemeModalOpen && (
                <ThemeSelector 
                    theme={currentTheme} 
                    saveTheme={saveUserTheme} 
                    onClose={() => setIsThemeModalOpen(false)} 
                />
            )}
        </div>
    );
}

// 渲染應用程式
export default App;
</file>

<file path="參考程式3.txt">
import React, { useState, useEffect, useCallback, useMemo, useRef } from 'react';
 已移除所有 Firebase 相關的 import

import { Upload, Camera, QrCode, RotateCcw, PaintBucket, DollarSign, Barcode, ClipboardCheck, Search, X } from 'lucide-react';

 -----------------------------------------------------------------------------
 1. 核心設定與工具函數 (Core Setup & Utilities)
 -----------------------------------------------------------------------------

 MVP 階段使用 Local Storage 模擬 App ID
const MVP_APP_ID = 'mvp-local-price-app'; 


  DJB2 雜湊算法：將條碼字串轉換為數值 ID (numericalID)。
  @param {string} str - 原始條碼字串
  @returns {number} - 32位元無符號整數
 
function djb2Hash(str) {
    let hash = 5381;
    for (let i = 0; i  str.length; i++) {
         hash  33 + charCode
        hash = ((hash  5) + hash) + str.charCodeAt(i);
    }
     轉換為無符號 32 位整數
    return hash  0;
}

 -----------------------------------------------------------------------------
 2. 主題配置 (Theming Configuration)
 -----------------------------------------------------------------------------

 定義所有可選主題及其 Tailwind 顏色類別
const THEMES = {
    'Default (Indigo)' { 
        primary 'bg-indigo-600', 
        light 'bg-indigo-100', 
        hover 'hoverbg-indigo-700', 
        border 'border-indigo-600',
        text 'text-indigo-600',
        color 'indigo'
    },
    '海洋藍 (Ocean Blue)' { 
        primary 'bg-blue-600', 
        light 'bg-blue-100', 
        hover 'hoverbg-blue-700', 
        border 'border-blue-600',
        text 'text-blue-600',
        color 'blue'
    },
    '森林綠 (Forest Green)' { 
        primary 'bg-green-600', 
        light 'bg-green-100', 
        hover 'hoverbg-green-700', 
        border 'border-green-600',
        text 'text-green-600',
        color 'green'
    },
    '夕陽紅 (Sunset Red)' { 
        primary 'bg-red-600', 
        light 'bg-red-100', 
        hover 'hoverbg-red-700', 
        border 'border-red-600',
        text 'text-red-600',
        color 'red'
    },
    '活力橙 (Vibrant Orange)' { 
        primary 'bg-orange-600', 
        light 'bg-orange-100', 
        hover 'hoverbg-orange-700', 
        border 'border-orange-600',
        text 'text-orange-600',
        color 'orange'
    },
    '薰衣草紫 (Lavender)' { 
        primary 'bg-purple-600', 
        light 'bg-purple-100', 
        hover 'hoverbg-purple-700', 
        border 'border-purple-600',
        text 'text-purple-600',
        color 'purple'
    },
};

const DEFAULT_THEME_KEY = 'Default (Indigo)';

 -----------------------------------------------------------------------------
 3. 自定義 Hook - 本地儲存設定 (useLocalMVPSetup)
 -----------------------------------------------------------------------------


  處理 MVP 階段的本地儲存、主題和使用者 ID 管理。
  @returns {object} 包含 userId, isAuthReady, currentTheme, saveUserTheme 等狀態和物件。
 
function useLocalMVPSetup() {
     獲取或生成持久化的用戶 ID
    const [userId] = useState(() = {
        let savedId = localStorage.getItem('mvp_user_id');
        if (!savedId) {
            savedId = crypto.randomUUID();
            localStorage.setItem('mvp_user_id', savedId);
        }
        return savedId;
    });

     載入本地儲存的主題
    const [currentTheme, setCurrentTheme] = useState(() = {
        const savedKey = localStorage.getItem('appTheme')  DEFAULT_THEME_KEY;
        return THEMES[savedKey]  THEMES[DEFAULT_THEME_KEY];
    });

     儲存用戶主題到本地儲存
    const saveUserTheme = useCallback((themeKey) = {
        localStorage.setItem('appTheme', themeKey);
        setCurrentTheme(THEMES[themeKey]  THEMES[DEFAULT_THEME_KEY]);
    }, []);

     在本地 MVP 模式下，應用程式始終是準備就緒的
    const isAuthReady = true; 
    
    return { 
        userId, 
        isAuthReady, 
        currentTheme, 
        saveUserTheme,
        appId MVP_APP_ID  傳回硬編碼的 App ID
    };
}

 -----------------------------------------------------------------------------
 4. 主題選擇元件 (Theme Selector Component)
 -----------------------------------------------------------------------------


  顯示主題選擇面板的 Modal 元件。
 
function ThemeSelector({ theme, saveTheme, onClose }) {
    const handleThemeChange = (themeKey) = {
        saveTheme(themeKey);
    };

    const handleReset = () = {
        saveTheme(DEFAULT_THEME_KEY);
    };

    return (
        div className=fixed inset-0 bg-gray-900 bg-opacity-75 z-50 flex items-center justify-center p-4
            div className=bg-white rounded-xl shadow-2xl w-full max-w-md p-6 transform transition-all
                h3 className={`text-xl font-bold ${theme.text} mb-4 border-b pb-2`}
                    PaintBucket className=inline-block w-5 h-5 mr-2 
                    介面配色選項
                h3
                
                div className=grid grid-cols-2 gap-4 mb-6
                    {Object.keys(THEMES).map((themeKey) = {
                        const themeData = THEMES[themeKey];
                        const isSelected = theme.color === themeData.color;
                        return (
                            button
                                key={themeKey}
                                onClick={() = handleThemeChange(themeKey)}
                                className={`
                                    p-3 rounded-lg text-white font-medium shadow-md transition-all 
                                    ${themeData.primary} ${themeData.hover} 
                                    ${isSelected  'ring-4 ring-offset-2 ring-opacity-70 ring-gray-400'  ''}
                                `}
                                style={{ transform isSelected  'scale(1.05)'  'scale(1)' }}
                            
                                {themeKey}
                            button
                        );
                    })}
                div

                div className=flex justify-between items-center pt-4 border-t
                    button
                        onClick={handleReset}
                        className=flex items-center text-sm font-medium text-gray-600 hovertext-gray-900 transition-colors
                    
                        RotateCcw className=w-4 h-4 mr-1 
                        清除還原 (預設)
                    button
                    button
                        onClick={onClose}
                        className={`px-4 py-2 text-white font-semibold rounded-lg shadow-lg ${theme.primary} ${theme.hover} transition-all`}
                    
                        關閉
                    button
                div
            div
        div
    );
}

 -----------------------------------------------------------------------------
 5. 條碼掃描元件 (Barcode Scanner Modal Component)
 -----------------------------------------------------------------------------


  條碼掃描 Modal 元件 (QuaggaJS 模擬)
  負責處理相機存取、視訊顯示，並將掃描結果傳回父元件。
 
function BarcodeScannerModal({ theme, onScanSuccess, onClose }) {
    const videoRef = useRef(null);
    const streamRef = useRef(null);
    const [isScanning, setIsScanning] = useState(false);
    const [scanError, setScanError] = useState('');

     開始掃描 (初始化攝影機)
    const startScanner = useCallback(async () = {
        setScanError('');
        try {
             嘗試取得後置攝影機 ('environment')
            const stream = await navigator.mediaDevices.getUserMedia({ 
                video { 
                    facingMode environment, 
                    width { ideal 640 },
                    height { ideal 480 }
                } 
            });
            streamRef.current = stream;
            
             將視訊流設定給 video 元素
            if (videoRef.current) {
                videoRef.current.srcObject = stream;
                await videoRef.current.play();
                setIsScanning(true);
            }
            
        } catch (err) {
            console.error(無法存取攝影機, err);
            setScanError(`無法存取攝影機或權限被拒絕。請檢查瀏覽器設定。 (${err.name} - ${err.message})`);
            setIsScanning(false);
        }
    }, []);

     停止掃描 (釋放攝影機資源)
    const stopScanner = useCallback(() = {
        if (streamRef.current) {
            streamRef.current.getTracks().forEach(track = track.stop());
            streamRef.current = null;
        }
        setIsScanning(false);
    }, []);

     處理 Modal 開啟關閉時的生命週期
    useEffect(() = {
        startScanner();
         清理函數：當元件卸載時停止攝影機
        return () = {
            stopScanner();
        };
    }, [startScanner, stopScanner]);

     模擬實際的條碼檢測成功
    const handleSimulatedScan = () = {
        stopScanner();
         模擬一個常見的 EAN-13 條碼：統一碼 471 開頭
        const mockBarcode = '4710123456789'; 
        onScanSuccess(mockBarcode);
        onClose();
    };

    const themePrimary = theme.primary;
    const themeHover = theme.hover;

    return (
        div className=fixed inset-0 bg-gray-900 bg-opacity-95 z-50 flex flex-col items-center justify-center p-4
            div className=bg-white rounded-xl shadow-2xl w-full max-w-lg p-6 transform transition-all flex flex-col items-center
                header className=flex justify-between items-center w-full mb-4 border-b pb-2
                    h3 className={`text-xl font-bold ${theme.text} flex items-center`}
                        QrCode className=inline-block w-5 h-5 mr-2 
                        條碼掃描器 (測試版)
                    h3
                    button onClick={() = { stopScanner(); onClose(); }} className=p-1 rounded-full text-gray-500 hovertext-gray-900
                        X className=w-6 h-6 
                    button
                header

                {scanError  (
                    div className=text-red-600 bg-red-100 p-4 rounded-lg w-full mb-4 text-center
                        {scanError}
                    div
                )  (
                    div className=relative w-full aspect-video bg-black rounded-lg overflow-hidden mb-4 border-4 border-dashed border-green-400
                        { 攝像頭視訊輸出 }
                        video 
                            ref={videoRef} 
                            className=w-full h-full object-cover 
                            style={{ transform 'scaleX(-1)' }}  鏡像翻轉，通常用於前置鏡頭，但後置也可用於某些情況下的預覽
                            playsInline 
                            muted
                        video
                        { 掃描對焦框 - 使用 Tailwind 模擬 }
                        div className=absolute inset-0 flex items-center justify-center pointer-events-none
                            div className=w-45 h-1 bg-green-500 opacity-75 animate-pulsediv
                            div className=absolute w-45 h-45 border-4 border-green-500 border-opacity-75 rounded-lgdiv
                        div
                    div
                )}
                
                { 模擬掃描成功按鈕 }
                {isScanning && !scanError && (
                    button
                        onClick={handleSimulatedScan}
                        className={`w-full p-3 mb-3 rounded-lg text-white font-semibold shadow-lg transition-all ${themePrimary} ${themeHover}`}
                    
                        模擬掃描成功並使用條碼 (EAN 4710123456789)
                    button
                )}

                button
                    onClick={() = { stopScanner(); onClose(); }}
                    className=w-full p-3 bg-gray-500 hoverbg-gray-600 text-white font-semibold rounded-lg shadow-lg transition-all
                
                    關閉掃描器
                button
            div
        div
    );
}


 -----------------------------------------------------------------------------
 6. 主應用程式元件 (App Component)
 -----------------------------------------------------------------------------

function App() {
     使用 Local Storage 替換 Firebase
    const { userId, isAuthReady, currentTheme, saveUserTheme } = useLocalMVPSetup();
    
     UI 狀態管理
    const [barcode, setBarcode] = useState('');
    const [productName, setProductName] = useState('');
    const [currentPrice, setCurrentPrice] = useState('');
    const [discountDetails, setDiscountDetails] = useState(''); 
    const [isThemeModalOpen, setIsThemeModalOpen] = useState(false);
    const [isScannerModalOpen, setIsScannerModalOpen] = useState(false); 
    const [comparisonResult, setComparisonResult] = useState({
        isBest false,
        bestPrice null,
        bestStore null,
        message '等待比價數據...'
    });
    const [isLoading, setIsLoading] = useState(false); 
    const [lookupStatus, setLookupStatus] = useState('ready'); 
    const [statusMessage, setStatusMessage] = useState(''); 

     -----------------------------------------------------------------------------
     產品識別邏輯 (Local Storage 版本)
     -----------------------------------------------------------------------------
    const lookupProduct = useCallback(async (barcodeData) = {
        if (!barcodeData  barcodeData.length  5) {
            setProductName('');
            setLookupStatus('ready');
            return;
        }

        setLookupStatus('searching');
        const numericalID = djb2Hash(barcodeData);
        
        try {
             模擬延遲
            await new Promise(r = setTimeout(r, 200)); 
            
             從 Local Storage 讀取產品主檔
            const productsJson = localStorage.getItem('MVP_PRODUCTS')  '{}';
            const products = JSON.parse(productsJson);

            if (products[numericalID]) {
                setProductName(products[numericalID].productName);
                setLookupStatus('found');
                console.log(產品已識別 (Local Storage), products[numericalID].productName);
            } else {
                setProductName('');
                setLookupStatus('new');
                console.log(新產品，請手動輸入名稱。);
            }
        } catch (error) {
            console.error(查詢產品失敗 (Local Storage), error);
            setLookupStatus('ready');
        }
    }, []);  移除 db 依賴項

    useEffect(() = {
         當條碼輸入改變且應用程式準備就緒時，觸發產品查詢
        if (barcode.length  0 && isAuthReady) {
            const timer = setTimeout(() = {
                lookupProduct(barcode);
            }, 500); 
            return () = clearTimeout(timer); 
        }
    }, [barcode, isAuthReady, lookupProduct]);

     處理狀態訊息自動消失
    useEffect(() = {
        if (statusMessage) {
            const timer = setTimeout(() = {
                setStatusMessage('');
            }, 3000);
            return () = clearTimeout(timer);
        }
    }, [statusMessage]);

     模擬 OCR 函數 (Placeholder)
    const performOCRAnalysis = useCallback(async (base64Image) = {
        console.log(正在模擬 OCR 分析...);
        await new Promise(r = setTimeout(r, 1500));  模擬 API 延遲

         模擬結構化輸出 - 包含優惠細節
        return {
            storeName '模擬超商 (OCR)',
            price (Math.random()  50 + 100).toFixed(2),  隨機價格
            discountDetails '買二送一優惠  單件 $120  有效期限 20260101', 
        };
    }, []);

     儲存並比價函數 (Local Storage 版本)
    const saveAndComparePrice = useCallback(async () = {
        const numericalID = djb2Hash(barcode);
        const priceValue = parseFloat(currentPrice);

        if (!userId  !barcode  !productName  isNaN(priceValue)) {
            setStatusMessage(請確保已輸入條碼、產品名稱和有效價格！);
            return;
        }

        setIsLoading(true);
        
        try {
             從 Local Storage 獲取數據
            const productsJson = localStorage.getItem('MVP_PRODUCTS')  '{}';
            const allRecordsJson = localStorage.getItem('MVP_PRICE_RECORDS')  '[]';
            let products = JSON.parse(productsJson);
            let allRecords = JSON.parse(allRecordsJson);

             0. 檢查並創建產品主檔 (如果不存在)
            if (!products[numericalID]) {
                products[numericalID] = {
                    numericalID,
                    barcodeData barcode,
                    productName,
                    createdAt new Date().toISOString(),
                };
                 儲存回 Local Storage
                localStorage.setItem('MVP_PRODUCTS', JSON.stringify(products));
                console.log(已創建新的產品主檔 (Local Storage)。);
            }
            
             1. 儲存新的價格紀錄
            const priceRecord = {
                numericalID,
                productName,
                storeName comparisonResult.bestStore  手動輸入,
                price priceValue,
                discountDetails discountDetails, 
                timestamp new Date().toISOString(),
                recordedBy userId,
            };
            
            allRecords.push(priceRecord);
             儲存回 Local Storage
            localStorage.setItem('MVP_PRICE_RECORDS', JSON.stringify(allRecords));
            
             2. 執行比價邏輯 - 查詢該產品所有歷史紀錄
            const records = allRecords.filter(r = r.numericalID === numericalID);

            if (records.length = 1) { 
                setComparisonResult({ 
                    isBest true, 
                    bestPrice priceValue,
                    bestStore comparisonResult.bestStore  手動輸入,
                    message '這是第一筆紀錄！' 
                });
            } else {
                 找出所有紀錄中的最低標價
                const bestDeal = records.reduce((best, cur) = cur.price  best.price  cur  best);
                
                const isCurrentBest = priceRecord.price = bestDeal.price;
                
                 比較邏輯：標價最低優先；標價相同則有折扣優先
                const isTrulyBest = isCurrentBest && (priceRecord.price  bestDeal.price  (priceRecord.price === bestDeal.price && priceRecord.discountDetails !== ''));
                
                setComparisonResult({
                    isBest isTrulyBest,
                    bestPrice bestDeal.price,
                    bestStore bestDeal.storeName,
                    message isTrulyBest 
                         '恭喜！這是目前紀錄中的最低標價 (或具備折扣)！' 
                         `非最低標價。歷史最低標價為 $${bestDeal.price} (商店 ${bestDeal.storeName})`
                });
            }

        } catch (error) {
            console.error(儲存或比價失敗 (Local Storage), error);
            setStatusMessage(數據操作失敗，請檢查瀏覽器設定或本地儲存空間。);
        } finally {
            setIsLoading(false);
        }
    }, [userId, barcode, productName, currentPrice, discountDetails, comparisonResult.bestStore]); 

     處理條碼掃描成功
    const handleScanSuccess = useCallback((scannedBarcode) = {
        setBarcode(scannedBarcode); 
        setStatusMessage(`條碼掃描成功！已自動填入條碼 ${scannedBarcode}`);
    }, []);

     條碼掃描功能點擊處理：打開 Modal
    const handleBarcodeScanClick = () = {
        setIsScannerModalOpen(true);
    };

     處理 OCR 成功
    const handleOcrSuccess = useCallback((result) = {
         自動填入 OCR 結果
        setCurrentPrice(result.price);
        setComparisonResult(prev = ({ ...prev, bestStore result.storeName })); 
        setDiscountDetails(result.discountDetails); 
        setStatusMessage(`OCR 成功！價格 $${result.price}, 商店 ${result.storeName}。優惠 ${result.discountDetails}`);
    }, []);

     處理 OCR 失敗
    const handleOcrError = useCallback((error) = {
        setStatusMessage(`OCR 失敗 ${error.message}`);
    }, []);


     主題變數，用於動態 Tailwind 類別
    const themePrimary = currentTheme.primary;
    const themeText = currentTheme.text;
    const themeLight = currentTheme.light;
    const themeBorder = currentTheme.border;

     根據查詢狀態顯示產品名稱提示
    const productNamePlaceholder = useMemo(() = {
        switch(lookupStatus) {
            case 'searching'
                return '正在查詢產品資料...';
            case 'found'
                return '產品名稱已自動載入';
            case 'new'
                return '產品不存在，請手動輸入名稱';
            default
                return '請先輸入條碼或掃描條碼';
        }
    }, [lookupStatus]);


    if (!isAuthReady) {
         雖然理論上 Local Storage 總是 ready，但保留此防呆
        return (
            div className=flex items-center justify-center min-h-screen bg-gray-50
                p className=text-xl text-gray-700正在初始化本地應用程式...p
            div
        );
    }

    return (
         應用程式主容器，使用動態主題色
        div className={`min-h-screen p-4 smp-8 ${themeLight}`}
            div className=max-w-xl mx-auto
                header className=flex justify-between items-center mb-6 border-b pb-4
                    h1 className={`text-3xl font-extrabold ${themeText} flex items-center`}
                        Barcode className=w-8 h-8 mr-2 
                        條碼比價神器 (MVP-本地儲存)
                    h1
                    div className=flex items-center space-x-3
                        { 主題切換按鈕 }
                        button 
                            onClick={() = setIsThemeModalOpen(true)}
                            className={`p-2 rounded-full text-white shadow-md transition-all ${themePrimary} hoveropacity-80`}
                            title=設定介面主題
                        
                            PaintBucket className=w-5 h-5 
                        button
                        p className=text-sm text-gray-500 hidden smblock用戶 ID {userId}p
                    div
                header

                { 狀態訊息提示 (取代 Alert) }
                {statusMessage && (
                    div className=bg-red-500 text-white p-3 rounded-lg shadow-md mb-4 text-center font-medium transition-opacity duration-300
                        {statusMessage}
                    div
                )}

                { 整合流程卡片：產品識別、價格紀錄與 OCR }
                div className={`p-6 rounded-xl shadow-2xl bg-white border-t-4 ${themeBorder}`}
                    h2 className={`text-xl font-semibold ${themeText} mb-6 flex items-center`}
                        Search className=w-5 h-5 mr-2  
                        產品識別、價格紀錄與比價
                    h2
                    
                    { 條碼輸入區 }
                    div className=mb-6
                        label className=block text-gray-700 font-medium mb-1條碼數據 (Barcode Data)label
                        input
                            type=text
                            value={barcode}
                            onChange={(e) = setBarcode(e.target.value)}
                            placeholder=掃描或手動輸入條碼 (EANUPC)
                            className=w-full p-3 border border-gray-300 rounded-lg focusring-2 focusring-indigo-500 focusborder-indigo-500 transition
                        
                    div
                    
                    { 產品名稱區 - 配合自動查詢 }
                    div className=mb-6
                        label className=block text-gray-700 font-medium mb-1產品名稱 (Product Name)label
                        input
                            type=text
                            value={productName}
                            onChange={(e) = setProductName(e.target.value)}
                            placeholder={productNamePlaceholder}
                            className={`w-full p-3 border border-gray-300 rounded-lg transition 
                                ${lookupStatus === 'found'  'bg-green-50'  lookupStatus === 'new'  'bg-yellow-50'  ''}`}
                            readOnly={lookupStatus === 'found'}  找到後鎖定
                        
                        p className=text-sm text-gray-500 mt-1
                            數值 ID (Hash) {barcode  djb2Hash(barcode)  '尚未計算'}
                        p
                    div

                    { 價格與商店輸入OCR 區 }
                    div className=grid grid-cols-2 gap-4 mb-4
                        div
                            label className=block text-gray-700 font-medium mb-1標價 ($)label
                            input
                                type=number
                                value={currentPrice}
                                onChange={(e) = setCurrentPrice(e.target.value)}
                                placeholder=價格 (手動輸入)
                                className=w-full p-3 border border-gray-300 rounded-lg
                            
                        div
                        div
                            label className=block text-gray-700 font-medium mb-1商店名稱label
                            input
                                type=text
                                value={comparisonResult.bestStore  ''}  這裡用來顯示 OCR 或手動輸入的商店
                                onChange={(e) = setComparisonResult(prev = ({ ...prev, bestStore e.target.value }))}
                                placeholder=商店名稱
                                className=w-full p-3 border border-gray-300 rounded-lg
                            
                        div
                    div
                    
                    { 優惠細節輸入區 (新增) }
                    div className=mb-6
                        label className=block text-gray-700 font-medium mb-1優惠細節促銷活動 (Discount Details)label
                        input
                            type=text
                            value={discountDetails}
                            onChange={(e) = setDiscountDetails(e.target.value)}
                            placeholder=例如 買二送一, 第二件半價, 組合價 $150
                            className=w-full p-3 border border-gray-300 rounded-lg
                        
                    div

                    { 動作按鈕群組 }
                    div className=grid grid-cols-1 smgrid-cols-2 gap-4
                        { 條碼掃描 - 現在會打開 Modal }
                        button 
                            className={`p-3 rounded-lg text-white font-semibold shadow-lg transition-all bg-gray-500 hoverbg-gray-600`}
                            onClick={handleBarcodeScanClick}
                        
                            Camera className=inline-block w-5 h-5 mr-2  啟動條碼掃描
                        button
                        
                        { 價格 OCR }
                        button 
                            className={`p-3 rounded-lg text-white font-semibold shadow-lg transition-all ${themePrimary} hoveropacity-80`}
                            onClick={() = document.getElementById('ocr-upload').click()}
                            disabled={isLoading}
                        
                            Upload className=inline-block w-5 h-5 mr-2  
                            {isLoading  'OCR 分析中...'  '拍照OCR 價格標籤'}
                        button
                        input
                            type=file
                            id=ocr-upload
                            accept=image
                            onChange={async (e) = {
                                const file = e.target.files[0];
                                if (!file) return;

                                setIsLoading(true);
                                try {
                                    const reader = new FileReader();
                                    reader.onloadend = async () = {
                                        const base64Image = reader.result.split(',')[1];
                                        const result = await performOCRAnalysis(base64Image);
                                        handleOcrSuccess(result);
                                    };
                                    reader.readAsDataURL(file);
                                } catch (error) {
                                    handleOcrError(error);
                                } finally {
                                    setIsLoading(false);
                                }
                            }}
                            className=hidden
                        
                    div
                    
                    { 儲存紀錄並比價 }
                    button 
                        className={`w-full mt-4 p-3 rounded-lg text-white font-semibold shadow-lg transition-all bg-emerald-500 hoverbg-emerald-600`}
                        onClick={saveAndComparePrice}
                        disabled={isLoading}
                    
                        ClipboardCheck className=inline-block w-5 h-5 mr-2  
                        {isLoading  '儲存並比價中...'  '儲存紀錄並比價'}
                    button
                div

                { 比價結果顯示區 }
                div className=mt-8
                    h2 className={`text-xl font-semibold ${themeText} mb-4 flex items-center`}
                        DollarSign className=w-5 h-5 mr-2 
                        比價結果
                    h2
                    div className={`p-6 rounded-xl shadow-xl border-2 ${comparisonResult.isBest  'border-green-500 bg-green-50'  'border-yellow-500 bg-yellow-50'}`}
                        p className={`text-lg font-bold ${comparisonResult.isBest  'text-green-700'  'text-yellow-700'}`}
                            {comparisonResult.message}
                        p
                        {comparisonResult.bestPrice && (
                            p className=text-sm text-gray-600 mt-2
                                歷史最低標價 ${comparisonResult.bestPrice}
                            p
                        )}
                        { 提示現在紀錄了詳細的優惠資訊 }
                        p className=text-xs text-gray-500 mt-2
                            附註 您的紀錄已儲存在瀏覽器的本地儲存中 (Local Storage)。
                        p
                    div
                div
            div

            { 主題選擇 Modal }
            {isThemeModalOpen && (
                ThemeSelector 
                    theme={currentTheme} 
                    saveTheme={saveUserTheme} 
                    onClose={() = setIsThemeModalOpen(false)} 
                
            )}

            { 條碼掃描 Modal - 掃描器介面 }
            {isScannerModalOpen && (
                BarcodeScannerModal
                    theme={currentTheme}
                    onScanSuccess={handleScanSuccess}
                    onClose={() = setIsScannerModalOpen(false)}
                
            )}
        div
    );
}

 渲染應用程式
export default App;
</file>

<file path="參考程式4.txt">
import React, { useState, useEffect, useCallback, useMemo, useRef } from 'react';
// 已移除所有 Firebase 相關的 import

import { Upload, Camera, QrCode, RotateCcw, PaintBucket, DollarSign, Barcode, ClipboardCheck, Search, X } from 'lucide-react';

// -----------------------------------------------------------------------------
// 1. 核心設定與工具函數 (Core Setup & Utilities)
// -----------------------------------------------------------------------------

// MVP 階段使用 Local Storage 模擬 App ID
const MVP_APP_ID = 'mvp-local-price-app'; 

/**
 * DJB2 雜湊算法：將條碼字串轉換為數值 ID (numericalID)。
 * @param {string} str - 原始條碼字串
 * @returns {number} - 32位元無符號整數
 */
function djb2Hash(str) {
    let hash = 5381;
    for (let i = 0; i < str.length; i++) {
        // hash * 33 + charCode
        hash = ((hash << 5) + hash) + str.charCodeAt(i);
    }
    // 轉換為無符號 32 位整數
    return hash >>> 0;
}

// -----------------------------------------------------------------------------
// 2. 主題配置 (Theming Configuration)
// -----------------------------------------------------------------------------

// 定義所有可選主題及其 Tailwind 顏色類別
const THEMES = {
    'Default (Indigo)': { 
        primary: 'bg-indigo-600', 
        light: 'bg-indigo-100', 
        hover: 'hover:bg-indigo-700', 
        border: 'border-indigo-600',
        text: 'text-indigo-600',
        color: 'indigo'
    },
    '海洋藍 (Ocean Blue)': { 
        primary: 'bg-blue-600', 
        light: 'bg-blue-100', 
        hover: 'hover:bg-blue-700', 
        border: 'border-blue-600',
        text: 'text-blue-600',
        color: 'blue'
    },
    '森林綠 (Forest Green)': { 
        primary: 'bg-green-600', 
        light: 'bg-green-100', 
        hover: 'hover:bg-green-700', 
        border: 'border-green-600',
        text: 'text-green-600',
        color: 'green'
    },
    '夕陽紅 (Sunset Red)': { 
        primary: 'bg-red-600', 
        light: 'bg-red-100', 
        hover: 'hover:bg-red-700', 
        border: 'border-red-600',
        text: 'text-red-600',
        color: 'red'
    },
    '活力橙 (Vibrant Orange)': { 
        primary: 'bg-orange-600', 
        light: 'bg-orange-100', 
        hover: 'hover:bg-orange-700', 
        border: 'border-orange-600',
        text: 'text-orange-600',
        color: 'orange'
    },
    '薰衣草紫 (Lavender)': { 
        primary: 'bg-purple-600', 
        light: 'bg-purple-100', 
        hover: 'hover:bg-purple-700', 
        border: 'border-purple-600',
        text: 'text-purple-600',
        color: 'purple'
    },
};

const DEFAULT_THEME_KEY = 'Default (Indigo)';

// -----------------------------------------------------------------------------
// 3. 自定義 Hook - 本地儲存設定 (useLocalMVPSetup)
// -----------------------------------------------------------------------------

/**
 * 處理 MVP 階段的本地儲存、主題和使用者 ID 管理。
 * @returns {object} 包含 userId, isAuthReady, currentTheme, saveUserTheme 等狀態和物件。
 */
function useLocalMVPSetup() {
    // 獲取或生成持久化的用戶 ID
    const [userId] = useState(() => {
        let savedId = localStorage.getItem('mvp_user_id');
        if (!savedId) {
            savedId = crypto.randomUUID();
            localStorage.setItem('mvp_user_id', savedId);
        }
        return savedId;
    });

    // 載入本地儲存的主題
    const [currentTheme, setCurrentTheme] = useState(() => {
        const savedKey = localStorage.getItem('appTheme') || DEFAULT_THEME_KEY;
        return THEMES[savedKey] || THEMES[DEFAULT_THEME_KEY];
    });

    // 儲存用戶主題到本地儲存
    const saveUserTheme = useCallback((themeKey) => {
        localStorage.setItem('appTheme', themeKey);
        setCurrentTheme(THEMES[themeKey] || THEMES[DEFAULT_THEME_KEY]);
    }, []);

    // 在本地 MVP 模式下，應用程式始終是準備就緒的
    const isAuthReady = true; 
    
    return { 
        userId, 
        isAuthReady, 
        currentTheme, 
        saveUserTheme,
        appId: MVP_APP_ID // 傳回硬編碼的 App ID
    };
}

// -----------------------------------------------------------------------------
// 4. 主題選擇元件 (Theme Selector Component)
// -----------------------------------------------------------------------------

/**
 * 顯示主題選擇面板的 Modal 元件。
 */
function ThemeSelector({ theme, saveTheme, onClose }) {
    const handleThemeChange = (themeKey) => {
        saveTheme(themeKey);
    };

    const handleReset = () => {
        saveTheme(DEFAULT_THEME_KEY);
    };

    return (
        <div className="fixed inset-0 bg-gray-900 bg-opacity-75 z-50 flex items-center justify-center p-4">
            <div className="bg-white rounded-xl shadow-2xl w-full max-w-md p-6 transform transition-all">
                <h3 className={`text-xl font-bold ${theme.text} mb-4 border-b pb-2`}>
                    <PaintBucket className="inline-block w-5 h-5 mr-2" />
                    介面配色選項
                </h3>
                
                <div className="grid grid-cols-2 gap-4 mb-6">
                    {Object.keys(THEMES).map((themeKey) => {
                        const themeData = THEMES[themeKey];
                        const isSelected = theme.color === themeData.color;
                        return (
                            <button
                                key={themeKey}
                                onClick={() => handleThemeChange(themeKey)}
                                className={`
                                    p-3 rounded-lg text-white font-medium shadow-md transition-all 
                                    ${themeData.primary} ${themeData.hover} 
                                    ${isSelected ? 'ring-4 ring-offset-2 ring-opacity-70 ring-gray-400' : ''}
                                `}
                                style={{ transform: isSelected ? 'scale(1.05)' : 'scale(1)' }}
                            >
                                {themeKey}
                            </button>
                        );
                    })}
                </div>

                <div className="flex justify-between items-center pt-4 border-t">
                    <button
                        onClick={handleReset}
                        className="flex items-center text-sm font-medium text-gray-600 hover:text-gray-900 transition-colors"
                    >
                        <RotateCcw className="w-4 h-4 mr-1" />
                        清除還原 (預設)
                    </button>
                    <button
                        onClick={onClose}
                        className={`px-4 py-2 text-white font-semibold rounded-lg shadow-lg ${theme.primary} ${theme.hover} transition-all`}
                    >
                        關閉
                    </button>
                </div>
            </div>
        </div>
    );
}

// -----------------------------------------------------------------------------
// 5. 條碼掃描元件 (Barcode Scanner Modal Component)
// -----------------------------------------------------------------------------

/**
 * 條碼掃描 Modal 元件 (QuaggaJS 模擬)
 * 負責處理相機存取、視訊顯示，並將掃描結果傳回父元件。
 */
function BarcodeScannerModal({ theme, onScanSuccess, onClose }) {
    const videoRef = useRef(null);
    const streamRef = useRef(null);
    const [isScanning, setIsScanning] = useState(false);
    const [scanError, setScanError] = useState('');

    // 開始掃描 (初始化攝影機)
    const startScanner = useCallback(async () => {
        setScanError('');
        try {
            // 嘗試取得後置攝影機 ('environment')
            const stream = await navigator.mediaDevices.getUserMedia({ 
                video: { 
                    facingMode: "environment", 
                    width: { ideal: 640 },
                    height: { ideal: 480 }
                } 
            });
            streamRef.current = stream;
            
            // 將視訊流設定給 <video> 元素
            if (videoRef.current) {
                videoRef.current.srcObject = stream;
                await videoRef.current.play();
                setIsScanning(true);
            }
            
        } catch (err) {
            console.error("無法存取攝影機:", err);
            setScanError(`無法存取攝影機或權限被拒絕。請檢查瀏覽器設定。 (${err.name} - ${err.message})`);
            setIsScanning(false);
        }
    }, []);

    // 停止掃描 (釋放攝影機資源)
    const stopScanner = useCallback(() => {
        if (streamRef.current) {
            streamRef.current.getTracks().forEach(track => track.stop());
            streamRef.current = null;
        }
        setIsScanning(false);
    }, []);

    // 處理 Modal 開啟/關閉時的生命週期
    useEffect(() => {
        startScanner();
        // 清理函數：當元件卸載時停止攝影機
        return () => {
            stopScanner();
        };
    }, [startScanner, stopScanner]);

    // 模擬實際的條碼檢測成功
    const handleSimulatedScan = () => {
        stopScanner();
        // 模擬一個常見的 EAN-13 條碼：統一碼 471 開頭
        const mockBarcode = '4710123456789'; 
        onScanSuccess(mockBarcode);
        onClose();
    };

    const themePrimary = theme.primary;
    const themeHover = theme.hover;

    return (
        <div className="fixed inset-0 bg-gray-900 bg-opacity-95 z-50 flex flex-col items-center justify-center p-4">
            <div className="bg-white rounded-xl shadow-2xl w-full max-w-lg p-6 transform transition-all flex flex-col items-center">
                <header className="flex justify-between items-center w-full mb-4 border-b pb-2">
                    <h3 className={`text-xl font-bold ${theme.text} flex items-center`}>
                        <QrCode className="inline-block w-5 h-5 mr-2" />
                        條碼掃描器 (測試版)
                    </h3>
                    <button onClick={() => { stopScanner(); onClose(); }} className="p-1 rounded-full text-gray-500 hover:text-gray-900">
                        <X className="w-6 h-6" />
                    </button>
                </header>

                {scanError ? (
                    <div className="text-red-600 bg-red-100 p-4 rounded-lg w-full mb-4 text-center">
                        {scanError}
                    </div>
                ) : (
                    <div className="relative w-full aspect-video bg-black rounded-lg overflow-hidden mb-4 border-4 border-dashed border-green-400">
                        {/* 攝像頭視訊輸出 */}
                        <video 
                            ref={videoRef} 
                            className="w-full h-full object-cover" 
                            // 條碼掃描使用後置鏡頭 (environment)，應保持畫面方向一致，不進行鏡像翻轉。
                            playsInline 
                            muted
                        ></video>
                        {/* 掃描對焦框 - 使用 Tailwind 模擬 */}
                        <div className="absolute inset-0 flex items-center justify-center pointer-events-none">
                            <div className="w-4/5 h-1 bg-green-500 opacity-75 animate-pulse"></div>
                            <div className="absolute w-4/5 h-4/5 border-4 border-green-500 border-opacity-75 rounded-lg"></div>
                        </div>
                    </div>
                )}
                
                {/* 模擬掃描成功按鈕 */}
                {isScanning && !scanError && (
                    <button
                        onClick={handleSimulatedScan}
                        className={`w-full p-3 mb-3 rounded-lg text-white font-semibold shadow-lg transition-all ${themePrimary} ${themeHover}`}
                    >
                        模擬掃描成功並使用條碼 (EAN: 4710123456789)
                    </button>
                )}

                <button
                    onClick={() => { stopScanner(); onClose(); }}
                    className="w-full p-3 bg-gray-500 hover:bg-gray-600 text-white font-semibold rounded-lg shadow-lg transition-all"
                >
                    關閉掃描器
                </button>
            </div>
        </div>
    );
}


// -----------------------------------------------------------------------------
// 6. 主應用程式元件 (App Component)
// -----------------------------------------------------------------------------

function App() {
    // 使用 Local Storage 替換 Firebase
    const { userId, isAuthReady, currentTheme, saveUserTheme } = useLocalMVPSetup();
    
    // UI 狀態管理
    const [barcode, setBarcode] = useState('');
    const [productName, setProductName] = useState('');
    const [currentPrice, setCurrentPrice] = useState('');
    const [discountDetails, setDiscountDetails] = useState(''); 
    const [isThemeModalOpen, setIsThemeModalOpen] = useState(false);
    const [isScannerModalOpen, setIsScannerModalOpen] = useState(false); 
    const [comparisonResult, setComparisonResult] = useState({
        isBest: false,
        bestPrice: null,
        bestStore: null,
        message: '等待比價數據...'
    });
    const [isLoading, setIsLoading] = useState(false); 
    const [lookupStatus, setLookupStatus] = useState('ready'); 
    const [statusMessage, setStatusMessage] = useState(''); 

    // -----------------------------------------------------------------------------
    // 產品識別邏輯 (Local Storage 版本)
    // -----------------------------------------------------------------------------
    const lookupProduct = useCallback(async (barcodeData) => {
        if (!barcodeData || barcodeData.length < 5) {
            setProductName('');
            setLookupStatus('ready');
            return;
        }

        setLookupStatus('searching');
        const numericalID = djb2Hash(barcodeData);
        
        try {
            // 模擬延遲
            await new Promise(r => setTimeout(r, 200)); 
            
            // 從 Local Storage 讀取產品主檔
            const productsJson = localStorage.getItem('MVP_PRODUCTS') || '{}';
            const products = JSON.parse(productsJson);

            if (products[numericalID]) {
                setProductName(products[numericalID].productName);
                setLookupStatus('found');
                console.log("產品已識別 (Local Storage):", products[numericalID].productName);
            } else {
                setProductName('');
                setLookupStatus('new');
                console.log("新產品，請手動輸入名稱。");
            }
        } catch (error) {
            console.error("查詢產品失敗 (Local Storage):", error);
            setLookupStatus('ready');
        }
    }, []); // 移除 db 依賴項

    useEffect(() => {
        // 當條碼輸入改變且應用程式準備就緒時，觸發產品查詢
        if (barcode.length > 0 && isAuthReady) {
            const timer = setTimeout(() => {
                lookupProduct(barcode);
            }, 500); 
            return () => clearTimeout(timer); 
        }
    }, [barcode, isAuthReady, lookupProduct]);

    // 處理狀態訊息自動消失
    useEffect(() => {
        if (statusMessage) {
            const timer = setTimeout(() => {
                setStatusMessage('');
            }, 3000);
            return () => clearTimeout(timer);
        }
    }, [statusMessage]);

    // 模擬 OCR 函數 (Placeholder)
    const performOCRAnalysis = useCallback(async (base64Image) => {
        console.log("正在模擬 OCR 分析...");
        await new Promise(r => setTimeout(r, 1500)); // 模擬 API 延遲

        // 模擬結構化輸出 - 包含優惠細節
        return {
            storeName: '模擬超商 (OCR)',
            price: (Math.random() * 50 + 100).toFixed(2), // 隨機價格
            discountDetails: '買二送一優惠 / 單件 $120 / 有效期限 2026/01/01', 
        };
    }, []);

    // 儲存並比價函數 (Local Storage 版本)
    const saveAndComparePrice = useCallback(async () => {
        const numericalID = djb2Hash(barcode);
        const priceValue = parseFloat(currentPrice);

        if (!userId || !barcode || !productName || isNaN(priceValue)) {
            setStatusMessage("請確保已輸入條碼、產品名稱和有效價格！");
            return;
        }

        setIsLoading(true);
        
        try {
            // 從 Local Storage 獲取數據
            const productsJson = localStorage.getItem('MVP_PRODUCTS') || '{}';
            const allRecordsJson = localStorage.getItem('MVP_PRICE_RECORDS') || '[]';
            let products = JSON.parse(productsJson);
            let allRecords = JSON.parse(allRecordsJson);

            // 0. 檢查並創建產品主檔 (如果不存在)
            if (!products[numericalID]) {
                products[numericalID] = {
                    numericalID,
                    barcodeData: barcode,
                    productName,
                    createdAt: new Date().toISOString(),
                };
                // 儲存回 Local Storage
                localStorage.setItem('MVP_PRODUCTS', JSON.stringify(products));
                console.log("已創建新的產品主檔 (Local Storage)。");
            }
            
            // 1. 儲存新的價格紀錄
            const priceRecord = {
                numericalID,
                productName,
                storeName: comparisonResult.bestStore || "手動輸入",
                price: priceValue,
                discountDetails: discountDetails, 
                timestamp: new Date().toISOString(),
                recordedBy: userId,
            };
            
            allRecords.push(priceRecord);
            // 儲存回 Local Storage
            localStorage.setItem('MVP_PRICE_RECORDS', JSON.stringify(allRecords));
            
            // 2. 執行比價邏輯 - 查詢該產品所有歷史紀錄
            const records = allRecords.filter(r => r.numericalID === numericalID);

            if (records.length <= 1) { 
                setComparisonResult({ 
                    isBest: true, 
                    bestPrice: priceValue,
                    bestStore: comparisonResult.bestStore || "手動輸入",
                    message: '這是第一筆紀錄！' 
                });
            } else {
                // 找出所有紀錄中的最低標價
                const bestDeal = records.reduce((best, cur) => cur.price < best.price ? cur : best);
                
                const isCurrentBest = priceRecord.price <= bestDeal.price;
                
                // 比較邏輯：標價最低優先；標價相同則有折扣優先
                const isTrulyBest = isCurrentBest && (priceRecord.price < bestDeal.price || (priceRecord.price === bestDeal.price && priceRecord.discountDetails !== ''));
                
                setComparisonResult({
                    isBest: isTrulyBest,
                    bestPrice: bestDeal.price,
                    bestStore: bestDeal.storeName,
                    message: isTrulyBest 
                        ? '恭喜！這是目前紀錄中的最低標價 (或具備折扣)！' 
                        : `非最低標價。歷史最低標價為 $${bestDeal.price} (商店: ${bestDeal.storeName})`
                });
            }

        } catch (error) {
            console.error("儲存或比價失敗 (Local Storage):", error);
            setStatusMessage("數據操作失敗，請檢查瀏覽器設定或本地儲存空間。");
        } finally {
            setIsLoading(false);
        }
    }, [userId, barcode, productName, currentPrice, discountDetails, comparisonResult.bestStore]); 

    // 處理條碼掃描成功
    const handleScanSuccess = useCallback((scannedBarcode) => {
        setBarcode(scannedBarcode); 
        setStatusMessage(`條碼掃描成功！已自動填入條碼: ${scannedBarcode}`);
    }, []);

    // 條碼掃描功能點擊處理：打開 Modal
    const handleBarcodeScanClick = () => {
        setIsScannerModalOpen(true);
    };

    // 處理 OCR 成功
    const handleOcrSuccess = useCallback((result) => {
        // 自動填入 OCR 結果
        setCurrentPrice(result.price);
        setComparisonResult(prev => ({ ...prev, bestStore: result.storeName })); 
        setDiscountDetails(result.discountDetails); 
        setStatusMessage(`OCR 成功！價格: $${result.price}, 商店: ${result.storeName}。優惠: ${result.discountDetails}`);
    }, []);

    // 處理 OCR 失敗
    const handleOcrError = useCallback((error) => {
        setStatusMessage(`OCR 失敗: ${error.message}`);
    }, []);


    // 主題變數，用於動態 Tailwind 類別
    const themePrimary = currentTheme.primary;
    const themeText = currentTheme.text;
    const themeLight = currentTheme.light;
    const themeBorder = currentTheme.border;

    // 根據查詢狀態顯示產品名稱提示
    const productNamePlaceholder = useMemo(() => {
        switch(lookupStatus) {
            case 'searching':
                return '正在查詢產品資料...';
            case 'found':
                return '產品名稱已自動載入';
            case 'new':
                return '產品不存在，請手動輸入名稱';
            default:
                return '請先輸入條碼或掃描條碼';
        }
    }, [lookupStatus]);


    if (!isAuthReady) {
        // 雖然理論上 Local Storage 總是 ready，但保留此防呆
        return (
            <div className="flex items-center justify-center min-h-screen bg-gray-50">
                <p className="text-xl text-gray-700">正在初始化本地應用程式...</p>
            </div>
        );
    }

    return (
        // 應用程式主容器，使用動態主題色
        <div className={`min-h-screen p-4 sm:p-8 ${themeLight}`}>
            <div className="max-w-xl mx-auto">
                <header className="flex justify-between items-center mb-6 border-b pb-4">
                    <h1 className={`text-3xl font-extrabold ${themeText} flex items-center`}>
                        <Barcode className="w-8 h-8 mr-2" />
                        條碼比價神器 (MVP-本地儲存)
                    </h1>
                    <div className="flex items-center space-x-3">
                        {/* 主題切換按鈕 */}
                        <button 
                            onClick={() => setIsThemeModalOpen(true)}
                            className={`p-2 rounded-full text-white shadow-md transition-all ${themePrimary} hover:opacity-80`}
                            title="設定介面主題"
                        >
                            <PaintBucket className="w-5 h-5" />
                        </button>
                        <p className="text-sm text-gray-500 hidden sm:block">用戶 ID: {userId}</p>
                    </div>
                </header>

                {/* 狀態訊息提示 (取代 Alert) */}
                {statusMessage && (
                    <div className="bg-red-500 text-white p-3 rounded-lg shadow-md mb-4 text-center font-medium transition-opacity duration-300">
                        {statusMessage}
                    </div>
                )}

                {/* 整合流程卡片：產品識別、價格紀錄與 OCR */}
                <div className={`p-6 rounded-xl shadow-2xl bg-white border-t-4 ${themeBorder}`}>
                    <h2 className={`text-xl font-semibold ${themeText} mb-6 flex items-center`}>
                        <Search className="w-5 h-5 mr-2" /> 
                        產品識別、價格紀錄與比價
                    </h2>
                    
                    {/* 條碼輸入區 */}
                    <div className="mb-6">
                        <label className="block text-gray-700 font-medium mb-1">條碼數據 (Barcode Data)</label>
                        <input
                            type="text"
                            value={barcode}
                            onChange={(e) => setBarcode(e.target.value)}
                            placeholder="掃描或手動輸入條碼 (EAN/UPC)"
                            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition"
                        />
                    </div>
                    
                    {/* 產品名稱區 - 配合自動查詢 */}
                    <div className="mb-6">
                        <label className="block text-gray-700 font-medium mb-1">產品名稱 (Product Name)</label>
                        <input
                            type="text"
                            value={productName}
                            onChange={(e) => setProductName(e.target.value)}
                            placeholder={productNamePlaceholder}
                            className={`w-full p-3 border border-gray-300 rounded-lg transition 
                                ${lookupStatus === 'found' ? 'bg-green-50' : lookupStatus === 'new' ? 'bg-yellow-50' : ''}`}
                            readOnly={lookupStatus === 'found'} // 找到後鎖定
                        />
                        <p className="text-sm text-gray-500 mt-1">
                            數值 ID (Hash): {barcode ? djb2Hash(barcode) : '尚未計算'}
                        </p>
                    </div>

                    {/* 價格與商店輸入/OCR 區 */}
                    <div className="grid grid-cols-2 gap-4 mb-4">
                        <div>
                            <label className="block text-gray-700 font-medium mb-1">標價 ($)</label>
                            <input
                                type="number"
                                value={currentPrice}
                                onChange={(e) => setCurrentPrice(e.target.value)}
                                placeholder="價格 (手動輸入)"
                                className="w-full p-3 border border-gray-300 rounded-lg"
                            />
                        </div>
                        <div>
                            <label className="block text-gray-700 font-medium mb-1">商店名稱</label>
                            <input
                                type="text"
                                value={comparisonResult.bestStore || ''} // 這裡用來顯示 OCR 或手動輸入的商店
                                onChange={(e) => setComparisonResult(prev => ({ ...prev, bestStore: e.target.value }))}
                                placeholder="商店名稱"
                                className="w-full p-3 border border-gray-300 rounded-lg"
                            />
                        </div>
                    </div>
                    
                    {/* 優惠細節輸入區 (新增) */}
                    <div className="mb-6">
                        <label className="block text-gray-700 font-medium mb-1">優惠細節/促銷活動 (Discount Details)</label>
                        <input
                            type="text"
                            value={discountDetails}
                            onChange={(e) => setDiscountDetails(e.target.value)}
                            placeholder="例如: 買二送一, 第二件半價, 組合價 $150"
                            className="w-full p-3 border border-gray-300 rounded-lg"
                        />
                    </div>

                    {/* 動作按鈕群組 */}
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                        {/* 條碼掃描 - 現在會打開 Modal */}
                        <button 
                            className={`p-3 rounded-lg text-white font-semibold shadow-lg transition-all bg-gray-500 hover:bg-gray-600`}
                            onClick={handleBarcodeScanClick}
                        >
                            <Camera className="inline-block w-5 h-5 mr-2" /> 啟動條碼掃描
                        </button>
                        
                        {/* 價格 OCR */}
                        <button 
                            className={`p-3 rounded-lg text-white font-semibold shadow-lg transition-all ${themePrimary} hover:opacity-80`}
                            onClick={() => document.getElementById('ocr-upload').click()}
                            disabled={isLoading}
                        >
                            <Upload className="inline-block w-5 h-5 mr-2" /> 
                            {isLoading ? 'OCR 分析中...' : '拍照/OCR 價格標籤'}
                        </button>
                        <input
                            type="file"
                            id="ocr-upload"
                            accept="image/*"
                            onChange={async (e) => {
                                const file = e.target.files[0];
                                if (!file) return;

                                setIsLoading(true);
                                try {
                                    const reader = new FileReader();
                                    reader.onloadend = async () => {
                                        const base64Image = reader.result.split(',')[1];
                                        const result = await performOCRAnalysis(base64Image);
                                        handleOcrSuccess(result);
                                    };
                                    reader.readAsDataURL(file);
                                } catch (error) {
                                    handleOcrError(error);
                                } finally {
                                    setIsLoading(false);
                                }
                            }}
                            className="hidden"
                        />
                    </div>
                    
                    {/* 儲存紀錄並比價 */}
                    <button 
                        className={`w-full mt-4 p-3 rounded-lg text-white font-semibold shadow-lg transition-all bg-emerald-500 hover:bg-emerald-600`}
                        onClick={saveAndComparePrice}
                        disabled={isLoading}
                    >
                        <ClipboardCheck className="inline-block w-5 h-5 mr-2" /> 
                        {isLoading ? '儲存並比價中...' : '儲存紀錄並比價'}
                    </button>
                </div>

                {/* 比價結果顯示區 */}
                <div className="mt-8">
                    <h2 className={`text-xl font-semibold ${themeText} mb-4 flex items-center`}>
                        <DollarSign className="w-5 h-5 mr-2" />
                        比價結果
                    </h2>
                    <div className={`p-6 rounded-xl shadow-xl border-2 ${comparisonResult.isBest ? 'border-green-500 bg-green-50' : 'border-yellow-500 bg-yellow-50'}`}>
                        <p className={`text-lg font-bold ${comparisonResult.isBest ? 'text-green-700' : 'text-yellow-700'}`}>
                            {comparisonResult.message}
                        </p>
                        {comparisonResult.bestPrice && (
                            <p className="text-sm text-gray-600 mt-2">
                                歷史最低標價: ${comparisonResult.bestPrice}
                            </p>
                        )}
                        {/* 提示現在紀錄了詳細的優惠資訊 */}
                        <p className="text-xs text-gray-500 mt-2">
                            **附註:** 您的紀錄已儲存在瀏覽器的本地儲存中 (Local Storage)。
                        </p>
                    </div>
                </div>
            </div>

            {/* 主題選擇 Modal */}
            {isThemeModalOpen && (
                <ThemeSelector 
                    theme={currentTheme} 
                    saveTheme={saveUserTheme} 
                    onClose={() => setIsThemeModalOpen(false)} 
                />
            )}

            {/* 條碼掃描 Modal - 掃描器介面 */}
            {isScannerModalOpen && (
                <BarcodeScannerModal
                    theme={currentTheme}
                    onScanSuccess={handleScanSuccess}
                    onClose={() => setIsScannerModalOpen(false)}
                />
            )}
        </div>
    );
}

// 渲染應用程式
export default App;
</file>

<file path="參考程式5.txt">
import React, { useState, useEffect, useCallback, useMemo, useRef } from 'react';
import { PaintBucket, DollarSign, Barcode, ClipboardCheck, Search, X, Camera, Zap, FileText } from 'lucide-react';

// -----------------------------------------------------------------------------
// 1. 核心設定與工具函數 (Core Setup & Utilities)
// -----------------------------------------------------------------------------

// MVP 階段使用 Local Storage 模擬 App ID
const MVP_APP_ID = 'mvp-local-price-app'; 

/**
 * DJB2 雜湊算法：將條碼字串轉換為數值 ID (numericalID)。
 * @param {string} str - 原始條碼字串
 * @returns {number} - 32位元無符號整數
 */
function djb2Hash(str) {
    let hash = 5381;
    for (let i = 0; i < str.length; i++) {
        // hash * 33 + charCode
        hash = ((hash << 5) + hash) + str.charCodeAt(i);
    }
    // 轉換為無符號 32 位整數
    return hash >>> 0;
}

/**
 * 指數退避 (Exponential Backoff) 執行 API 呼叫
 */
async function callGeminiApiWithRetry(payload, apiUrl, maxRetries = 3) {
    let lastError = null;
    for (let i = 0; i < maxRetries; i++) {
        try {
            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            if (!response.ok) {
                const errorBody = await response.json();
                throw new Error(`API response error: ${response.status} - ${errorBody.error?.message || 'Unknown error'}`);
            }

            const result = await response.json();
            const candidate = result.candidates?.[0];

            if (candidate && candidate.content?.parts?.[0]?.text) {
                const jsonText = candidate.content.parts[0].text;
                try {
                    // 解析 JSON 內容
                    return JSON.parse(jsonText);
                } catch (parseError) {
                    console.error("JSON Parse Error:", jsonText, parseError);
                    throw new Error("AI 輸出格式錯誤，無法解析 JSON。");
                }
            } else {
                throw new Error("AI 無法生成有效內容。");
            }

        } catch (error) {
            lastError = error;
            console.warn(`API call failed (Attempt ${i + 1}/${maxRetries}):`, error.message);
            if (i < maxRetries - 1) {
                const delay = Math.pow(2, i) * 1000; // 1s, 2s, 4s
                await new Promise(resolve => setTimeout(resolve, delay));
            }
        }
    }
    throw lastError; // 所有重試失敗後拋出最後一個錯誤
}


// -----------------------------------------------------------------------------
// 2. 主題配置與本地儲存設定 (Theming & Local Setup)
// -----------------------------------------------------------------------------

const THEMES = {
    'Default (Indigo)': { primary: 'bg-indigo-600', light: 'bg-indigo-100', hover: 'hover:bg-indigo-700', border: 'border-indigo-600', text: 'text-indigo-600', color: 'indigo' },
    '海洋藍 (Ocean Blue)': { primary: 'bg-blue-600', light: 'bg-blue-100', hover: 'hover:bg-blue-700', border: 'border-blue-600', text: 'text-blue-600', color: 'blue' },
    '森林綠 (Forest Green)': { primary: 'bg-green-600', light: 'bg-green-100', hover: 'hover:bg-green-700', border: 'border-green-600', text: 'text-green-600', color: 'green' },
    '夕陽紅 (Sunset Red)': { primary: 'bg-red-600', light: 'bg-red-100', hover: 'hover:bg-red-700', border: 'border-red-600', text: 'text-red-600', color: 'red' },
    '活力橙 (Vibrant Orange)': { primary: 'bg-orange-600', light: 'bg-orange-100', hover: 'hover:bg-orange-700', border: 'border-orange-600', text: 'text-orange-600', color: 'orange' },
    '薰衣草紫 (Lavender)': { primary: 'bg-purple-600', light: 'bg-purple-100', hover: 'hover:bg-purple-700', border: 'border-purple-600', text: 'text-purple-600', color: 'purple' },
};
const DEFAULT_THEME_KEY = 'Default (Indigo)';

function useLocalMVPSetup() {
    const [userId] = useState(() => {
        let savedId = localStorage.getItem('mvp_user_id');
        if (!savedId) {
            savedId = crypto.randomUUID();
            localStorage.setItem('mvp_user_id', savedId);
        }
        return savedId;
    });

    const [currentTheme, setCurrentTheme] = useState(() => {
        const savedKey = localStorage.getItem('appTheme') || DEFAULT_THEME_KEY;
        return THEMES[savedKey] || THEMES[DEFAULT_THEME_KEY];
    });

    const saveUserTheme = useCallback((themeKey) => {
        localStorage.setItem('appTheme', themeKey);
        setCurrentTheme(THEMES[themeKey] || THEMES[DEFAULT_THEME_KEY]);
    }, []);

    const isAuthReady = true; 
    
    return { userId, isAuthReady, currentTheme, saveUserTheme, appId: MVP_APP_ID };
}

// 主題選擇元件 (Theme Selector Component)
function ThemeSelector({ theme, saveTheme, onClose }) {
    // 渲染邏輯與之前相同，略
    const handleThemeChange = (themeKey) => {
        saveTheme(themeKey);
    };

    const handleReset = () => {
        saveTheme(DEFAULT_THEME_KEY);
    };

    return (
        <div className="fixed inset-0 bg-gray-900 bg-opacity-75 z-50 flex items-center justify-center p-4">
            <div className="bg-white rounded-xl shadow-2xl w-full max-w-md p-6 transform transition-all">
                <h3 className={`text-xl font-bold ${theme.text} mb-4 border-b pb-2`}>
                    <PaintBucket className="inline-block w-5 h-5 mr-2" />
                    介面配色選項
                </h3>
                
                <div className="grid grid-cols-2 gap-4 mb-6">
                    {Object.keys(THEMES).map((themeKey) => {
                        const themeData = THEMES[themeKey];
                        const isSelected = theme.color === themeData.color;
                        return (
                            <button
                                key={themeKey}
                                onClick={() => handleThemeChange(themeKey)}
                                className={`
                                    p-3 rounded-lg text-white font-medium shadow-md transition-all 
                                    ${themeData.primary} ${themeData.hover} 
                                    ${isSelected ? 'ring-4 ring-offset-2 ring-opacity-70 ring-gray-400' : ''}
                                `}
                                style={{ transform: isSelected ? 'scale(1.05)' : 'scale(1)' }}
                            >
                                {themeKey}
                            </button>
                        );
                    })}
                </div>

                <div className="flex justify-between items-center pt-4 border-t">
                    <button
                        onClick={handleReset}
                        className="flex items-center text-sm font-medium text-gray-600 hover:text-gray-900 transition-colors"
                    >
                        <RotateCcw className="w-4 h-4 mr-1" />
                        清除還原 (預設)
                    </button>
                    <button
                        onClick={onClose}
                        className={`px-4 py-2 text-white font-semibold rounded-lg shadow-lg ${theme.primary} ${theme.hover} transition-all`}
                    >
                        關閉
                    </button>
                </div>
            </div>
        </div>
    );
}

// -----------------------------------------------------------------------------
// 3. AI 視覺擷取與分析元件 (AIOcrCaptureModal)
// -----------------------------------------------------------------------------

/**
 * 負責攝影機存取、擷取畫面並呼叫 AI 進行分析的 Modal 元件。
 * 輸出為結構化 JSON 數據。
 */
function AIOcrCaptureModal({ theme, onAnalysisSuccess, onClose }) {
    const videoRef = useRef(null);
    const streamRef = useRef(null);
    const [isCapturing, setIsCapturing] = useState(false);
    const [scanError, setScanError] = useState('');
    const [isLoading, setIsLoading] = useState(false);

    // 取得攝影機畫面
    const startCamera = useCallback(async () => {
        setScanError('');
        try {
            const stream = await navigator.mediaDevices.getUserMedia({ 
                video: { 
                    facingMode: "environment", // 使用後置鏡頭
                    width: { ideal: 640 },
                    height: { ideal: 480 }
                } 
            });
            streamRef.current = stream;
            
            if (videoRef.current) {
                videoRef.current.srcObject = stream;
                await videoRef.current.play();
                setIsCapturing(true);
            }
            
        } catch (err) {
            console.error("無法存取攝影機:", err);
            setScanError(`無法存取攝影機或權限被拒絕。請檢查瀏覽器設定。 (${err.name} - ${err.message})`);
            setIsCapturing(false);
        }
    }, []);

    // 釋放攝影機資源
    const stopCamera = useCallback(() => {
        if (streamRef.current) {
            streamRef.current.getTracks().forEach(track => track.stop());
            streamRef.current = null;
        }
        setIsCapturing(false);
    }, []);

    // 處理 Modal 開啟/關閉時的生命週期
    useEffect(() => {
        startCamera();
        return () => {
            stopCamera();
        };
    }, [startCamera, stopCamera]);


    // 擷取視訊畫面並轉換為 Base64 (JPG) 數據
    const captureImage = useCallback(() => {
        if (!videoRef.current) return null;

        const video = videoRef.current;
        const canvas = document.createElement('canvas');
        // 確保 canvas 尺寸與視訊畫面的解析度一致
        canvas.width = video.videoWidth; 
        canvas.height = video.videoHeight;

        const ctx = canvas.getContext('2d');
        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

        // 將 canvas 內容轉換為 Base64 格式的 JPEG 圖片 (0.8 品質)
        const base64Data = canvas.toDataURL('image/jpeg', 0.8);
        
        // 移除 MIME 類型前綴，只留下純 Base64 數據
        return base64Data.split(',')[1];
    }, []);
    
    // 呼叫 Gemini API 進行視覺分析
    const handleCaptureAndAnalyze = useCallback(async () => {
        setIsLoading(true);
        setScanError('');
        
        try {
            const base64Image = captureImage();
            if (!base64Image) {
                throw new Error("無法從攝影機擷取到影像。");
            }

            const systemPrompt = "你是一位專業的價目標籤和收據分析師。請從提供的影像中提取產品條碼（如果可見）、主要售價、商店名稱以及任何詳細的折扣或促銷資訊。請嚴格以 JSON 格式輸出。";
            const userPrompt = "分析此產品或價目標籤的影像，並提取所需的結構化資訊。請在 discountDetails 中提供所有相關的促銷訊息，例如買一送一、有效期限等。";
            const apiKey = "" 
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

            const payload = {
                contents: [{
                    role: "user",
                    parts: [
                        { text: userPrompt },
                        {
                            inlineData: {
                                mimeType: "image/jpeg",
                                data: base64Image
                            }
                        }
                    ]
                }],
                systemInstruction: { parts: [{ text: systemPrompt }] },
                generationConfig: {
                    responseMimeType: "application/json",
                    responseSchema: {
                        type: "OBJECT",
                        properties: {
                            "scannedBarcode": { "type": "STRING", "description": "影像中找到的 EAN, UPC 或其他產品條碼數字，如果不可見則為空字串。" },
                            "extractedPrice": { "type": "STRING", "description": "主要售價，格式為乾淨的字串，不帶貨幣符號（例如：'120.5'）。如果找不到價格則為空字串。" },
                            "storeName": { "type": "STRING", "description": "價目標籤或收據所示的商店名稱。如果不可見則為空字串。" },
                            "discountDetails": { "type": "STRING", "description": "發現的任何促銷或折扣的詳細描述（例如：'買一送一', '第二件半價', '有效期限 2026/01/01'）。如果沒有折扣則為空字串。" }
                        },
                        "required": ["scannedBarcode", "extractedPrice", "storeName", "discountDetails"]
                    }
                }
            };
            
            // 呼叫 API 並獲取結構化 JSON 結果
            const analysisResult = await callGeminiApiWithRetry(payload, apiUrl);
            
            // 傳回分析結果
            onAnalysisSuccess(analysisResult);
            stopCamera();
            onClose();

        } catch (error) {
            console.error("AI 分析失敗:", error);
            setScanError(`AI 分析錯誤: ${error.message}`);
        } finally {
            setIsLoading(false);
        }
    }, [captureImage, onAnalysisSuccess, onClose, stopCamera]);
    
    // 模擬 AI 分析成功 (用於測試或無網路環境)
    const handleSimulatedAnalysis = () => {
        stopCamera();
        const mockResult = {
            scannedBarcode: '4710123456789',
            extractedPrice: (Math.random() * 50 + 100).toFixed(0).toString(),
            storeName: '模擬超商 (AI)',
            discountDetails: '買二送一優惠 / 限時促銷',
        };
        onAnalysisSuccess(mockResult);
        onClose();
    };

    const themePrimary = theme.primary;
    const themeHover = theme.hover;

    return (
        <div className="fixed inset-0 bg-gray-900 bg-opacity-95 z-50 flex flex-col items-center justify-center p-4">
            <div className="bg-white rounded-xl shadow-2xl w-full max-w-lg p-6 transform transition-all flex flex-col items-center">
                <header className="flex justify-between items-center w-full mb-4 border-b pb-2">
                    <h3 className={`text-xl font-bold ${theme.text} flex items-center`}>
                        <Zap className="inline-block w-5 h-5 mr-2" />
                        AI 視覺擷取與分析
                    </h3>
                    <button onClick={() => { stopCamera(); onClose(); }} className="p-1 rounded-full text-gray-500 hover:text-gray-900">
                        <X className="w-6 h-6" />
                    </button>
                </header>

                {/* 狀態顯示 */}
                {isLoading && (
                    <div className={`w-full p-4 mb-4 rounded-lg bg-yellow-100 text-yellow-800 flex items-center justify-center`}>
                        <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-yellow-800" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        正在呼叫 AI 分析影像，請稍候...
                    </div>
                )}
                
                {scanError ? (
                    <div className="text-red-600 bg-red-100 p-4 rounded-lg w-full mb-4 text-center">
                        {scanError}
                    </div>
                ) : (
                    <div className="relative w-full aspect-video bg-black rounded-lg overflow-hidden mb-4 border-4 border-dashed border-white">
                        {/* 攝像頭視訊輸出 */}
                        <video 
                            ref={videoRef} 
                            className="w-full h-full object-cover" 
                            playsInline 
                            muted
                        ></video>
                        {/* 掃描對焦框 */}
                        <div className="absolute inset-0 flex items-center justify-center pointer-events-none">
                            <div className="absolute w-4/5 h-4/5 border-4 border-yellow-400 border-opacity-75 rounded-lg"></div>
                        </div>
                    </div>
                )}
                
                {/* 動作按鈕 */}
                {isCapturing && !scanError && (
                    <button
                        onClick={handleCaptureAndAnalyze}
                        className={`w-full p-3 mb-3 rounded-lg text-white font-semibold shadow-lg transition-all ${themePrimary} ${themeHover} flex items-center justify-center`}
                        disabled={isLoading}
                    >
                        <Camera className="w-5 h-5 mr-2" />
                        擷取畫面並由 AI 自動分析
                    </button>
                )}

                {/* 模擬按鈕 (用於測試) */}
                 <button
                    onClick={handleSimulatedAnalysis}
                    className="w-full p-3 mb-3 bg-gray-500 hover:bg-gray-600 text-white font-semibold rounded-lg shadow-lg transition-all"
                    disabled={isLoading}
                >
                    模擬 AI 分析成功 (測試用)
                </button>


                <button
                    onClick={() => { stopCamera(); onClose(); }}
                    className="w-full p-3 bg-red-500 hover:bg-red-600 text-white font-semibold rounded-lg shadow-lg transition-all"
                    disabled={isLoading}
                >
                    關閉
                </button>
            </div>
        </div>
    );
}


// -----------------------------------------------------------------------------
// 4. 主應用程式元件 (App Component)
// -----------------------------------------------------------------------------

function App() {
    const { userId, isAuthReady, currentTheme, saveUserTheme } = useLocalMVPSetup();
    
    // UI 狀態管理
    const [barcode, setBarcode] = useState('');
    const [productName, setProductName] = useState('');
    const [currentPrice, setCurrentPrice] = useState('');
    const [discountDetails, setDiscountDetails] = useState(''); 
    const [isThemeModalOpen, setIsThemeModalOpen] = useState(false);
    const [isCaptureModalOpen, setIsCaptureModalOpen] = useState(false); 
    const [comparisonResult, setComparisonResult] = useState({
        isBest: false,
        bestPrice: null,
        bestStore: null,
        message: '等待比價數據...'
    });
    const [isLoading, setIsLoading] = useState(false); 
    const [lookupStatus, setLookupStatus] = useState('ready'); 
    const [statusMessage, setStatusMessage] = useState(''); 
    const [storeName, setStoreName] = useState(''); // 新增商店名稱狀態

    // -----------------------------------------------------------------------------
    // 產品識別邏輯 (Local Storage 版本)
    // -----------------------------------------------------------------------------
    const lookupProduct = useCallback(async (barcodeData) => {
        if (!barcodeData || barcodeData.length < 5) {
            setProductName('');
            setLookupStatus('ready');
            return;
        }

        setLookupStatus('searching');
        const numericalID = djb2Hash(barcodeData);
        
        try {
            await new Promise(r => setTimeout(r, 200)); 
            
            const productsJson = localStorage.getItem('MVP_PRODUCTS') || '{}';
            const products = JSON.parse(productsJson);

            if (products[numericalID]) {
                setProductName(products[numericalID].productName);
                setLookupStatus('found');
            } else {
                setProductName('');
                setLookupStatus('new');
            }
        } catch (error) {
            console.error("查詢產品失敗 (Local Storage):", error);
            setLookupStatus('ready');
        }
    }, []);

    useEffect(() => {
        if (barcode.length > 0 && isAuthReady) {
            const timer = setTimeout(() => {
                lookupProduct(barcode);
            }, 500); 
            return () => clearTimeout(timer); 
        }
    }, [barcode, isAuthReady, lookupProduct]);

    // 處理狀態訊息自動消失
    useEffect(() => {
        if (statusMessage) {
            const timer = setTimeout(() => {
                setStatusMessage('');
            }, 3000);
            return () => clearTimeout(timer);
        }
    }, [statusMessage]);

    // 處理 AI 分析成功並填入欄位
    const handleAiCaptureSuccess = useCallback((result) => {
        const { scannedBarcode, extractedPrice, storeName, discountDetails } = result;
        
        // 1. 自動填入條碼
        if (scannedBarcode && scannedBarcode.length > 5) {
            setBarcode(scannedBarcode);
        } else if (!barcode) {
             setStatusMessage("AI 未能識別條碼，請手動輸入或確保條碼清晰！");
        }

        // 2. 自動填入價格、商店、折扣
        setCurrentPrice(extractedPrice || '');
        setStoreName(storeName || '');
        setDiscountDetails(discountDetails || '');

        setStatusMessage(`AI 分析成功！價格: $${extractedPrice || '?'}, 商店: ${storeName || '?'}, 折扣: ${discountDetails || '無'}`);
    }, [barcode]);
    
    // 儲存並比價函數 (Local Storage 版本)
    const saveAndComparePrice = useCallback(async () => {
        const numericalID = djb2Hash(barcode);
        const priceValue = parseFloat(currentPrice);

        if (!userId || !barcode || !productName || isNaN(priceValue)) {
            setStatusMessage("請確保已輸入條碼、產品名稱和有效價格！");
            return;
        }

        setIsLoading(true);
        
        try {
            // 從 Local Storage 獲取數據
            const productsJson = localStorage.getItem('MVP_PRODUCTS') || '{}';
            const allRecordsJson = localStorage.getItem('MVP_PRICE_RECORDS') || '[]';
            let products = JSON.parse(productsJson);
            let allRecords = JSON.parse(allRecordsJson);

            // 0. 檢查並創建產品主檔 (如果不存在)
            if (!products[numericalID]) {
                products[numericalID] = {
                    numericalID,
                    barcodeData: barcode,
                    productName,
                    createdAt: new Date().toISOString(),
                };
                localStorage.setItem('MVP_PRODUCTS', JSON.stringify(products));
            }
            
            // 1. 儲存新的價格紀錄
            const priceRecord = {
                numericalID,
                productName,
                storeName: storeName || "手動輸入",
                price: priceValue,
                discountDetails: discountDetails, 
                timestamp: new Date().toISOString(),
                recordedBy: userId,
            };
            
            allRecords.push(priceRecord);
            localStorage.setItem('MVP_PRICE_RECORDS', JSON.stringify(allRecords));
            
            // 2. 執行比價邏輯 - 查詢該產品所有歷史紀錄
            const records = allRecords.filter(r => r.numericalID === numericalID);

            if (records.length <= 1) { 
                setComparisonResult({ 
                    isBest: true, 
                    bestPrice: priceValue,
                    bestStore: storeName || "手動輸入",
                    message: '這是第一筆紀錄！' 
                });
            } else {
                const bestDeal = records.reduce((best, cur) => cur.price < best.price ? cur : best);
                const isCurrentBest = priceRecord.price <= bestDeal.price;
                
                // 比較邏輯：標價最低優先；標價相同則有折扣優先
                const isTrulyBest = isCurrentBest && (priceRecord.price < bestDeal.price || (priceRecord.price === bestDeal.price && priceRecord.discountDetails !== ''));
                
                setComparisonResult({
                    isBest: isTrulyBest,
                    bestPrice: bestDeal.price,
                    bestStore: bestDeal.storeName,
                    message: isTrulyBest 
                        ? '恭喜！這是目前紀錄中的最低標價 (或具備折扣)！' 
                        : `非最低標價。歷史最低標價為 $${bestDeal.price} (商店: ${bestDeal.storeName})`
                });
            }

        } catch (error) {
            console.error("儲存或比價失敗 (Local Storage):", error);
            setStatusMessage("數據操作失敗，請檢查瀏覽器設定或本地儲存空間。");
        } finally {
            setIsLoading(false);
        }
    }, [userId, barcode, productName, currentPrice, discountDetails, storeName]); 

    // 主題變數，用於動態 Tailwind 類別
    const themePrimary = currentTheme.primary;
    const themeText = currentTheme.text;
    const themeLight = currentTheme.light;
    const themeBorder = currentTheme.border;

    // 根據查詢狀態顯示產品名稱提示
    const productNamePlaceholder = useMemo(() => {
        switch(lookupStatus) {
            case 'searching':
                return '正在查詢產品資料...';
            case 'found':
                return '產品名稱已自動載入';
            case 'new':
                return '產品不存在，請手動輸入名稱';
            default:
                return '請先輸入條碼或掃描條碼';
        }
    }, [lookupStatus]);


    if (!isAuthReady) {
        return (
            <div className="flex items-center justify-center min-h-screen bg-gray-50">
                <p className="text-xl text-gray-700">正在初始化本地應用程式...</p>
            </div>
        );
    }

    return (
        <div className={`min-h-screen p-4 sm:p-8 ${themeLight}`}>
            <div className="max-w-xl mx-auto">
                <header className="flex justify-between items-center mb-6 border-b pb-4">
                    <h1 className={`text-3xl font-extrabold ${themeText} flex items-center`}>
                        <Barcode className="w-8 h-8 mr-2" />
                        條碼比價神器 (MVP-AI)
                    </h1>
                    <div className="flex items-center space-x-3">
                        <button 
                            onClick={() => setIsThemeModalOpen(true)}
                            className={`p-2 rounded-full text-white shadow-md transition-all ${themePrimary} hover:opacity-80`}
                            title="設定介面主題"
                        >
                            <PaintBucket className="w-5 h-5" />
                        </button>
                        <p className="text-sm text-gray-500 hidden sm:block">用戶 ID: {userId}</p>
                    </div>
                </header>

                {/* 狀態訊息提示 */}
                {statusMessage && (
                    <div className="bg-red-500 text-white p-3 rounded-lg shadow-md mb-4 text-center font-medium transition-opacity duration-300">
                        {statusMessage}
                    </div>
                )}

                {/* 整合流程卡片：AI 擷取入口 */}
                <div className={`p-6 rounded-xl shadow-2xl bg-white border-t-4 ${themeBorder}`}>
                    <h2 className={`text-xl font-semibold ${themeText} mb-6 flex items-center`}>
                        <Zap className="w-5 h-5 mr-2" /> 
                        步驟 1: AI 視覺自動擷取資料
                    </h2>
                    
                    {/* AI 擷取按鈕 - 開啟 Modal */}
                    <button 
                        className={`w-full p-4 rounded-lg text-white font-bold text-lg shadow-xl transition-all ${themePrimary} hover:opacity-80 flex items-center justify-center`}
                        onClick={() => setIsCaptureModalOpen(true)}
                    >
                        <Camera className="inline-block w-6 h-6 mr-3" /> 
                        開啟鏡頭，擷取條碼與價目標籤
                    </button>
                    
                    <hr className="my-6 border-gray-200" />

                    <h2 className={`text-xl font-semibold text-gray-700 mb-4 flex items-center`}>
                        <FileText className="w-5 h-5 mr-2" /> 
                        步驟 2: 檢查或手動輸入資料
                    </h2>

                    {/* 條碼輸入區 */}
                    <div className="mb-4">
                        <label className="block text-gray-700 font-medium mb-1">條碼數據 (Barcode Data)</label>
                        <input
                            type="text"
                            value={barcode}
                            onChange={(e) => setBarcode(e.target.value)}
                            placeholder="AI 自動填入，或手動輸入"
                            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition"
                        />
                    </div>
                    
                    {/* 產品名稱區 - 配合自動查詢 */}
                    <div className="mb-4">
                        <label className="block text-gray-700 font-medium mb-1">產品名稱 (Product Name)</label>
                        <input
                            type="text"
                            value={productName}
                            onChange={(e) => setProductName(e.target.value)}
                            placeholder={productNamePlaceholder}
                            className={`w-full p-3 border border-gray-300 rounded-lg transition 
                                ${lookupStatus === 'found' ? 'bg-green-50' : lookupStatus === 'new' ? 'bg-yellow-50' : ''}`}
                            readOnly={lookupStatus === 'found'} 
                        />
                        <p className="text-sm text-gray-500 mt-1">
                            數值 ID (Hash): {barcode ? djb2Hash(barcode) : '尚未計算'}
                        </p>
                    </div>

                    {/* 價格與商店輸入/OCR 區 */}
                    <div className="grid grid-cols-2 gap-4 mb-4">
                        <div>
                            <label className="block text-gray-700 font-medium mb-1">標價 ($) <span className="text-red-500">*</span></label>
                            <input
                                type="number"
                                value={currentPrice}
                                onChange={(e) => setCurrentPrice(e.target.value)}
                                placeholder="AI 擷取"
                                className="w-full p-3 border border-gray-300 rounded-lg"
                            />
                        </div>
                        <div>
                            <label className="block text-gray-700 font-medium mb-1">商店名稱</label>
                            <input
                                type="text"
                                value={storeName} 
                                onChange={(e) => setStoreName(e.target.value)}
                                placeholder="AI 擷取"
                                className="w-full p-3 border border-gray-300 rounded-lg"
                            />
                        </div>
                    </div>
                    
                    {/* 優惠細節輸入區 (新增) */}
                    <div className="mb-6">
                        <label className="block text-gray-700 font-medium mb-1">優惠細節/促銷活動 (Discount Details)</label>
                        <input
                            type="text"
                            value={discountDetails}
                            onChange={(e) => setDiscountDetails(e.target.value)}
                            placeholder="AI 擷取 (例如: 買二送一, 第二件半價)"
                            className="w-full p-3 border border-gray-300 rounded-lg"
                        />
                    </div>

                    {/* 儲存紀錄並比價 */}
                    <button 
                        className={`w-full mt-4 p-3 rounded-lg text-white font-semibold shadow-lg transition-all bg-emerald-500 hover:bg-emerald-600`}
                        onClick={saveAndComparePrice}
                        disabled={isLoading}
                    >
                        <ClipboardCheck className="inline-block w-5 h-5 mr-2" /> 
                        {isLoading ? '儲存並比價中...' : '步驟 3: 儲存紀錄並比價'}
                    </button>
                </div>

                {/* 比價結果顯示區 */}
                <div className="mt-8">
                    <h2 className={`text-xl font-semibold ${themeText} mb-4 flex items-center`}>
                        <DollarSign className="w-5 h-5 mr-2" />
                        比價結果
                    </h2>
                    <div className={`p-6 rounded-xl shadow-xl border-2 ${comparisonResult.isBest ? 'border-green-500 bg-green-50' : 'border-yellow-500 bg-yellow-50'}`}>
                        <p className={`text-lg font-bold ${comparisonResult.isBest ? 'text-green-700' : 'text-yellow-700'}`}>
                            {comparisonResult.message}
                        </p>
                        {comparisonResult.bestPrice && (
                            <p className="text-sm text-gray-600 mt-2">
                                歷史最低標價: ${comparisonResult.bestPrice}
                            </p>
                        )}
                        <p className="text-xs text-gray-500 mt-2">
                            **附註:** 您的紀錄已儲存在瀏覽器的本地儲存中 (Local Storage)。
                        </p>
                    </div>
                </div>
            </div>

            {/* 主題選擇 Modal */}
            {isThemeModalOpen && (
                <ThemeSelector 
                    theme={currentTheme} 
                    saveTheme={saveUserTheme} 
                    onClose={() => setIsThemeModalOpen(false)} 
                />
            )}

            {/* AI 視覺擷取 Modal */}
            {isCaptureModalOpen && (
                <AIOcrCaptureModal
                    theme={currentTheme}
                    onAnalysisSuccess={handleAiCaptureSuccess}
                    onClose={() => setIsCaptureModalOpen(false)}
                />
            )}
        </div>
    );
}

export default App;
</file>

<file path="待實作.txt">
增加頁面可以指定區塊，區分品名、標價、單價以及分辨不同店家的設計


因為目前程式還在MVP測試階段，我想請你幫我先屏蔽firbase的相關功能，但是不要刪除任何程式，資料庫部分改由使用本機儲存，等待測試沒有問題後再開啟firebase串接，且請幫我在程式中柱記，以免其他開發者誤刪


單價計算與優惠處理：目前的比價僅基於標價。我們應該如何擴展數據模型來納入容量 (e.g., 500ml, 100g) 和優惠類型 (e.g., 買一送一)，以計算出真正的**「每單位最低價」**？

數據唯一性與雜湊 ID 衝突：我們使用 DJB2 雜湊算法從條碼字串生成數值 ID。雖然衝突機率低，但在處理數百萬個產品時，如何設計一個數據庫檢查機制來避免兩個不同條碼意外產生相同的數值 ID？

優化二維條碼 (QR Code, Data Matrix) 的支援：如何將 QuaggaJS (只支援一維條碼) 替換或增強為支援 QR Code 的函式庫，以實現對所有類型條碼的通用識別？

歷史價格趨勢分析：除了顯示最低價，如何增加功能，讓使用者能查看價格隨時間變動的圖表，以判斷當前是否為進場的最佳時機？
</file>

</files>
