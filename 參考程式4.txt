import React, { useState, useEffect, useCallback, useMemo, useRef } from 'react';
// 已移除所有 Firebase 相關的 import

import { Upload, Camera, QrCode, RotateCcw, PaintBucket, DollarSign, Barcode, ClipboardCheck, Search, X } from 'lucide-react';

// -----------------------------------------------------------------------------
// 1. 核心設定與工具函數 (Core Setup & Utilities)
// -----------------------------------------------------------------------------

// MVP 階段使用 Local Storage 模擬 App ID
const MVP_APP_ID = 'mvp-local-price-app'; 

/**
 * DJB2 雜湊算法：將條碼字串轉換為數值 ID (numericalID)。
 * @param {string} str - 原始條碼字串
 * @returns {number} - 32位元無符號整數
 */
function djb2Hash(str) {
    let hash = 5381;
    for (let i = 0; i < str.length; i++) {
        // hash * 33 + charCode
        hash = ((hash << 5) + hash) + str.charCodeAt(i);
    }
    // 轉換為無符號 32 位整數
    return hash >>> 0;
}

// -----------------------------------------------------------------------------
// 2. 主題配置 (Theming Configuration)
// -----------------------------------------------------------------------------

// 定義所有可選主題及其 Tailwind 顏色類別
const THEMES = {
    'Default (Indigo)': { 
        primary: 'bg-indigo-600', 
        light: 'bg-indigo-100', 
        hover: 'hover:bg-indigo-700', 
        border: 'border-indigo-600',
        text: 'text-indigo-600',
        color: 'indigo'
    },
    '海洋藍 (Ocean Blue)': { 
        primary: 'bg-blue-600', 
        light: 'bg-blue-100', 
        hover: 'hover:bg-blue-700', 
        border: 'border-blue-600',
        text: 'text-blue-600',
        color: 'blue'
    },
    '森林綠 (Forest Green)': { 
        primary: 'bg-green-600', 
        light: 'bg-green-100', 
        hover: 'hover:bg-green-700', 
        border: 'border-green-600',
        text: 'text-green-600',
        color: 'green'
    },
    '夕陽紅 (Sunset Red)': { 
        primary: 'bg-red-600', 
        light: 'bg-red-100', 
        hover: 'hover:bg-red-700', 
        border: 'border-red-600',
        text: 'text-red-600',
        color: 'red'
    },
    '活力橙 (Vibrant Orange)': { 
        primary: 'bg-orange-600', 
        light: 'bg-orange-100', 
        hover: 'hover:bg-orange-700', 
        border: 'border-orange-600',
        text: 'text-orange-600',
        color: 'orange'
    },
    '薰衣草紫 (Lavender)': { 
        primary: 'bg-purple-600', 
        light: 'bg-purple-100', 
        hover: 'hover:bg-purple-700', 
        border: 'border-purple-600',
        text: 'text-purple-600',
        color: 'purple'
    },
};

const DEFAULT_THEME_KEY = 'Default (Indigo)';

// -----------------------------------------------------------------------------
// 3. 自定義 Hook - 本地儲存設定 (useLocalMVPSetup)
// -----------------------------------------------------------------------------

/**
 * 處理 MVP 階段的本地儲存、主題和使用者 ID 管理。
 * @returns {object} 包含 userId, isAuthReady, currentTheme, saveUserTheme 等狀態和物件。
 */
function useLocalMVPSetup() {
    // 獲取或生成持久化的用戶 ID
    const [userId] = useState(() => {
        let savedId = localStorage.getItem('mvp_user_id');
        if (!savedId) {
            savedId = crypto.randomUUID();
            localStorage.setItem('mvp_user_id', savedId);
        }
        return savedId;
    });

    // 載入本地儲存的主題
    const [currentTheme, setCurrentTheme] = useState(() => {
        const savedKey = localStorage.getItem('appTheme') || DEFAULT_THEME_KEY;
        return THEMES[savedKey] || THEMES[DEFAULT_THEME_KEY];
    });

    // 儲存用戶主題到本地儲存
    const saveUserTheme = useCallback((themeKey) => {
        localStorage.setItem('appTheme', themeKey);
        setCurrentTheme(THEMES[themeKey] || THEMES[DEFAULT_THEME_KEY]);
    }, []);

    // 在本地 MVP 模式下，應用程式始終是準備就緒的
    const isAuthReady = true; 
    
    return { 
        userId, 
        isAuthReady, 
        currentTheme, 
        saveUserTheme,
        appId: MVP_APP_ID // 傳回硬編碼的 App ID
    };
}

// -----------------------------------------------------------------------------
// 4. 主題選擇元件 (Theme Selector Component)
// -----------------------------------------------------------------------------

/**
 * 顯示主題選擇面板的 Modal 元件。
 */
function ThemeSelector({ theme, saveTheme, onClose }) {
    const handleThemeChange = (themeKey) => {
        saveTheme(themeKey);
    };

    const handleReset = () => {
        saveTheme(DEFAULT_THEME_KEY);
    };

    return (
        <div className="fixed inset-0 bg-gray-900 bg-opacity-75 z-50 flex items-center justify-center p-4">
            <div className="bg-white rounded-xl shadow-2xl w-full max-w-md p-6 transform transition-all">
                <h3 className={`text-xl font-bold ${theme.text} mb-4 border-b pb-2`}>
                    <PaintBucket className="inline-block w-5 h-5 mr-2" />
                    介面配色選項
                </h3>
                
                <div className="grid grid-cols-2 gap-4 mb-6">
                    {Object.keys(THEMES).map((themeKey) => {
                        const themeData = THEMES[themeKey];
                        const isSelected = theme.color === themeData.color;
                        return (
                            <button
                                key={themeKey}
                                onClick={() => handleThemeChange(themeKey)}
                                className={`
                                    p-3 rounded-lg text-white font-medium shadow-md transition-all 
                                    ${themeData.primary} ${themeData.hover} 
                                    ${isSelected ? 'ring-4 ring-offset-2 ring-opacity-70 ring-gray-400' : ''}
                                `}
                                style={{ transform: isSelected ? 'scale(1.05)' : 'scale(1)' }}
                            >
                                {themeKey}
                            </button>
                        );
                    })}
                </div>

                <div className="flex justify-between items-center pt-4 border-t">
                    <button
                        onClick={handleReset}
                        className="flex items-center text-sm font-medium text-gray-600 hover:text-gray-900 transition-colors"
                    >
                        <RotateCcw className="w-4 h-4 mr-1" />
                        清除還原 (預設)
                    </button>
                    <button
                        onClick={onClose}
                        className={`px-4 py-2 text-white font-semibold rounded-lg shadow-lg ${theme.primary} ${theme.hover} transition-all`}
                    >
                        關閉
                    </button>
                </div>
            </div>
        </div>
    );
}

// -----------------------------------------------------------------------------
// 5. 條碼掃描元件 (Barcode Scanner Modal Component)
// -----------------------------------------------------------------------------

/**
 * 條碼掃描 Modal 元件 (QuaggaJS 模擬)
 * 負責處理相機存取、視訊顯示，並將掃描結果傳回父元件。
 */
function BarcodeScannerModal({ theme, onScanSuccess, onClose }) {
    const videoRef = useRef(null);
    const streamRef = useRef(null);
    const [isScanning, setIsScanning] = useState(false);
    const [scanError, setScanError] = useState('');

    // 開始掃描 (初始化攝影機)
    const startScanner = useCallback(async () => {
        setScanError('');
        try {
            // 嘗試取得後置攝影機 ('environment')
            const stream = await navigator.mediaDevices.getUserMedia({ 
                video: { 
                    facingMode: "environment", 
                    width: { ideal: 640 },
                    height: { ideal: 480 }
                } 
            });
            streamRef.current = stream;
            
            // 將視訊流設定給 <video> 元素
            if (videoRef.current) {
                videoRef.current.srcObject = stream;
                await videoRef.current.play();
                setIsScanning(true);
            }
            
        } catch (err) {
            console.error("無法存取攝影機:", err);
            setScanError(`無法存取攝影機或權限被拒絕。請檢查瀏覽器設定。 (${err.name} - ${err.message})`);
            setIsScanning(false);
        }
    }, []);

    // 停止掃描 (釋放攝影機資源)
    const stopScanner = useCallback(() => {
        if (streamRef.current) {
            streamRef.current.getTracks().forEach(track => track.stop());
            streamRef.current = null;
        }
        setIsScanning(false);
    }, []);

    // 處理 Modal 開啟/關閉時的生命週期
    useEffect(() => {
        startScanner();
        // 清理函數：當元件卸載時停止攝影機
        return () => {
            stopScanner();
        };
    }, [startScanner, stopScanner]);

    // 模擬實際的條碼檢測成功
    const handleSimulatedScan = () => {
        stopScanner();
        // 模擬一個常見的 EAN-13 條碼：統一碼 471 開頭
        const mockBarcode = '4710123456789'; 
        onScanSuccess(mockBarcode);
        onClose();
    };

    const themePrimary = theme.primary;
    const themeHover = theme.hover;

    return (
        <div className="fixed inset-0 bg-gray-900 bg-opacity-95 z-50 flex flex-col items-center justify-center p-4">
            <div className="bg-white rounded-xl shadow-2xl w-full max-w-lg p-6 transform transition-all flex flex-col items-center">
                <header className="flex justify-between items-center w-full mb-4 border-b pb-2">
                    <h3 className={`text-xl font-bold ${theme.text} flex items-center`}>
                        <QrCode className="inline-block w-5 h-5 mr-2" />
                        條碼掃描器 (測試版)
                    </h3>
                    <button onClick={() => { stopScanner(); onClose(); }} className="p-1 rounded-full text-gray-500 hover:text-gray-900">
                        <X className="w-6 h-6" />
                    </button>
                </header>

                {scanError ? (
                    <div className="text-red-600 bg-red-100 p-4 rounded-lg w-full mb-4 text-center">
                        {scanError}
                    </div>
                ) : (
                    <div className="relative w-full aspect-video bg-black rounded-lg overflow-hidden mb-4 border-4 border-dashed border-green-400">
                        {/* 攝像頭視訊輸出 */}
                        <video 
                            ref={videoRef} 
                            className="w-full h-full object-cover" 
                            // 條碼掃描使用後置鏡頭 (environment)，應保持畫面方向一致，不進行鏡像翻轉。
                            playsInline 
                            muted
                        ></video>
                        {/* 掃描對焦框 - 使用 Tailwind 模擬 */}
                        <div className="absolute inset-0 flex items-center justify-center pointer-events-none">
                            <div className="w-4/5 h-1 bg-green-500 opacity-75 animate-pulse"></div>
                            <div className="absolute w-4/5 h-4/5 border-4 border-green-500 border-opacity-75 rounded-lg"></div>
                        </div>
                    </div>
                )}
                
                {/* 模擬掃描成功按鈕 */}
                {isScanning && !scanError && (
                    <button
                        onClick={handleSimulatedScan}
                        className={`w-full p-3 mb-3 rounded-lg text-white font-semibold shadow-lg transition-all ${themePrimary} ${themeHover}`}
                    >
                        模擬掃描成功並使用條碼 (EAN: 4710123456789)
                    </button>
                )}

                <button
                    onClick={() => { stopScanner(); onClose(); }}
                    className="w-full p-3 bg-gray-500 hover:bg-gray-600 text-white font-semibold rounded-lg shadow-lg transition-all"
                >
                    關閉掃描器
                </button>
            </div>
        </div>
    );
}


// -----------------------------------------------------------------------------
// 6. 主應用程式元件 (App Component)
// -----------------------------------------------------------------------------

function App() {
    // 使用 Local Storage 替換 Firebase
    const { userId, isAuthReady, currentTheme, saveUserTheme } = useLocalMVPSetup();
    
    // UI 狀態管理
    const [barcode, setBarcode] = useState('');
    const [productName, setProductName] = useState('');
    const [currentPrice, setCurrentPrice] = useState('');
    const [discountDetails, setDiscountDetails] = useState(''); 
    const [isThemeModalOpen, setIsThemeModalOpen] = useState(false);
    const [isScannerModalOpen, setIsScannerModalOpen] = useState(false); 
    const [comparisonResult, setComparisonResult] = useState({
        isBest: false,
        bestPrice: null,
        bestStore: null,
        message: '等待比價數據...'
    });
    const [isLoading, setIsLoading] = useState(false); 
    const [lookupStatus, setLookupStatus] = useState('ready'); 
    const [statusMessage, setStatusMessage] = useState(''); 

    // -----------------------------------------------------------------------------
    // 產品識別邏輯 (Local Storage 版本)
    // -----------------------------------------------------------------------------
    const lookupProduct = useCallback(async (barcodeData) => {
        if (!barcodeData || barcodeData.length < 5) {
            setProductName('');
            setLookupStatus('ready');
            return;
        }

        setLookupStatus('searching');
        const numericalID = djb2Hash(barcodeData);
        
        try {
            // 模擬延遲
            await new Promise(r => setTimeout(r, 200)); 
            
            // 從 Local Storage 讀取產品主檔
            const productsJson = localStorage.getItem('MVP_PRODUCTS') || '{}';
            const products = JSON.parse(productsJson);

            if (products[numericalID]) {
                setProductName(products[numericalID].productName);
                setLookupStatus('found');
                console.log("產品已識別 (Local Storage):", products[numericalID].productName);
            } else {
                setProductName('');
                setLookupStatus('new');
                console.log("新產品，請手動輸入名稱。");
            }
        } catch (error) {
            console.error("查詢產品失敗 (Local Storage):", error);
            setLookupStatus('ready');
        }
    }, []); // 移除 db 依賴項

    useEffect(() => {
        // 當條碼輸入改變且應用程式準備就緒時，觸發產品查詢
        if (barcode.length > 0 && isAuthReady) {
            const timer = setTimeout(() => {
                lookupProduct(barcode);
            }, 500); 
            return () => clearTimeout(timer); 
        }
    }, [barcode, isAuthReady, lookupProduct]);

    // 處理狀態訊息自動消失
    useEffect(() => {
        if (statusMessage) {
            const timer = setTimeout(() => {
                setStatusMessage('');
            }, 3000);
            return () => clearTimeout(timer);
        }
    }, [statusMessage]);

    // 模擬 OCR 函數 (Placeholder)
    const performOCRAnalysis = useCallback(async (base64Image) => {
        console.log("正在模擬 OCR 分析...");
        await new Promise(r => setTimeout(r, 1500)); // 模擬 API 延遲

        // 模擬結構化輸出 - 包含優惠細節
        return {
            storeName: '模擬超商 (OCR)',
            price: (Math.random() * 50 + 100).toFixed(2), // 隨機價格
            discountDetails: '買二送一優惠 / 單件 $120 / 有效期限 2026/01/01', 
        };
    }, []);

    // 儲存並比價函數 (Local Storage 版本)
    const saveAndComparePrice = useCallback(async () => {
        const numericalID = djb2Hash(barcode);
        const priceValue = parseFloat(currentPrice);

        if (!userId || !barcode || !productName || isNaN(priceValue)) {
            setStatusMessage("請確保已輸入條碼、產品名稱和有效價格！");
            return;
        }

        setIsLoading(true);
        
        try {
            // 從 Local Storage 獲取數據
            const productsJson = localStorage.getItem('MVP_PRODUCTS') || '{}';
            const allRecordsJson = localStorage.getItem('MVP_PRICE_RECORDS') || '[]';
            let products = JSON.parse(productsJson);
            let allRecords = JSON.parse(allRecordsJson);

            // 0. 檢查並創建產品主檔 (如果不存在)
            if (!products[numericalID]) {
                products[numericalID] = {
                    numericalID,
                    barcodeData: barcode,
                    productName,
                    createdAt: new Date().toISOString(),
                };
                // 儲存回 Local Storage
                localStorage.setItem('MVP_PRODUCTS', JSON.stringify(products));
                console.log("已創建新的產品主檔 (Local Storage)。");
            }
            
            // 1. 儲存新的價格紀錄
            const priceRecord = {
                numericalID,
                productName,
                storeName: comparisonResult.bestStore || "手動輸入",
                price: priceValue,
                discountDetails: discountDetails, 
                timestamp: new Date().toISOString(),
                recordedBy: userId,
            };
            
            allRecords.push(priceRecord);
            // 儲存回 Local Storage
            localStorage.setItem('MVP_PRICE_RECORDS', JSON.stringify(allRecords));
            
            // 2. 執行比價邏輯 - 查詢該產品所有歷史紀錄
            const records = allRecords.filter(r => r.numericalID === numericalID);

            if (records.length <= 1) { 
                setComparisonResult({ 
                    isBest: true, 
                    bestPrice: priceValue,
                    bestStore: comparisonResult.bestStore || "手動輸入",
                    message: '這是第一筆紀錄！' 
                });
            } else {
                // 找出所有紀錄中的最低標價
                const bestDeal = records.reduce((best, cur) => cur.price < best.price ? cur : best);
                
                const isCurrentBest = priceRecord.price <= bestDeal.price;
                
                // 比較邏輯：標價最低優先；標價相同則有折扣優先
                const isTrulyBest = isCurrentBest && (priceRecord.price < bestDeal.price || (priceRecord.price === bestDeal.price && priceRecord.discountDetails !== ''));
                
                setComparisonResult({
                    isBest: isTrulyBest,
                    bestPrice: bestDeal.price,
                    bestStore: bestDeal.storeName,
                    message: isTrulyBest 
                        ? '恭喜！這是目前紀錄中的最低標價 (或具備折扣)！' 
                        : `非最低標價。歷史最低標價為 $${bestDeal.price} (商店: ${bestDeal.storeName})`
                });
            }

        } catch (error) {
            console.error("儲存或比價失敗 (Local Storage):", error);
            setStatusMessage("數據操作失敗，請檢查瀏覽器設定或本地儲存空間。");
        } finally {
            setIsLoading(false);
        }
    }, [userId, barcode, productName, currentPrice, discountDetails, comparisonResult.bestStore]); 

    // 處理條碼掃描成功
    const handleScanSuccess = useCallback((scannedBarcode) => {
        setBarcode(scannedBarcode); 
        setStatusMessage(`條碼掃描成功！已自動填入條碼: ${scannedBarcode}`);
    }, []);

    // 條碼掃描功能點擊處理：打開 Modal
    const handleBarcodeScanClick = () => {
        setIsScannerModalOpen(true);
    };

    // 處理 OCR 成功
    const handleOcrSuccess = useCallback((result) => {
        // 自動填入 OCR 結果
        setCurrentPrice(result.price);
        setComparisonResult(prev => ({ ...prev, bestStore: result.storeName })); 
        setDiscountDetails(result.discountDetails); 
        setStatusMessage(`OCR 成功！價格: $${result.price}, 商店: ${result.storeName}。優惠: ${result.discountDetails}`);
    }, []);

    // 處理 OCR 失敗
    const handleOcrError = useCallback((error) => {
        setStatusMessage(`OCR 失敗: ${error.message}`);
    }, []);


    // 主題變數，用於動態 Tailwind 類別
    const themePrimary = currentTheme.primary;
    const themeText = currentTheme.text;
    const themeLight = currentTheme.light;
    const themeBorder = currentTheme.border;

    // 根據查詢狀態顯示產品名稱提示
    const productNamePlaceholder = useMemo(() => {
        switch(lookupStatus) {
            case 'searching':
                return '正在查詢產品資料...';
            case 'found':
                return '產品名稱已自動載入';
            case 'new':
                return '產品不存在，請手動輸入名稱';
            default:
                return '請先輸入條碼或掃描條碼';
        }
    }, [lookupStatus]);


    if (!isAuthReady) {
        // 雖然理論上 Local Storage 總是 ready，但保留此防呆
        return (
            <div className="flex items-center justify-center min-h-screen bg-gray-50">
                <p className="text-xl text-gray-700">正在初始化本地應用程式...</p>
            </div>
        );
    }

    return (
        // 應用程式主容器，使用動態主題色
        <div className={`min-h-screen p-4 sm:p-8 ${themeLight}`}>
            <div className="max-w-xl mx-auto">
                <header className="flex justify-between items-center mb-6 border-b pb-4">
                    <h1 className={`text-3xl font-extrabold ${themeText} flex items-center`}>
                        <Barcode className="w-8 h-8 mr-2" />
                        條碼比價神器 (MVP-本地儲存)
                    </h1>
                    <div className="flex items-center space-x-3">
                        {/* 主題切換按鈕 */}
                        <button 
                            onClick={() => setIsThemeModalOpen(true)}
                            className={`p-2 rounded-full text-white shadow-md transition-all ${themePrimary} hover:opacity-80`}
                            title="設定介面主題"
                        >
                            <PaintBucket className="w-5 h-5" />
                        </button>
                        <p className="text-sm text-gray-500 hidden sm:block">用戶 ID: {userId}</p>
                    </div>
                </header>

                {/* 狀態訊息提示 (取代 Alert) */}
                {statusMessage && (
                    <div className="bg-red-500 text-white p-3 rounded-lg shadow-md mb-4 text-center font-medium transition-opacity duration-300">
                        {statusMessage}
                    </div>
                )}

                {/* 整合流程卡片：產品識別、價格紀錄與 OCR */}
                <div className={`p-6 rounded-xl shadow-2xl bg-white border-t-4 ${themeBorder}`}>
                    <h2 className={`text-xl font-semibold ${themeText} mb-6 flex items-center`}>
                        <Search className="w-5 h-5 mr-2" /> 
                        產品識別、價格紀錄與比價
                    </h2>
                    
                    {/* 條碼輸入區 */}
                    <div className="mb-6">
                        <label className="block text-gray-700 font-medium mb-1">條碼數據 (Barcode Data)</label>
                        <input
                            type="text"
                            value={barcode}
                            onChange={(e) => setBarcode(e.target.value)}
                            placeholder="掃描或手動輸入條碼 (EAN/UPC)"
                            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition"
                        />
                    </div>
                    
                    {/* 產品名稱區 - 配合自動查詢 */}
                    <div className="mb-6">
                        <label className="block text-gray-700 font-medium mb-1">產品名稱 (Product Name)</label>
                        <input
                            type="text"
                            value={productName}
                            onChange={(e) => setProductName(e.target.value)}
                            placeholder={productNamePlaceholder}
                            className={`w-full p-3 border border-gray-300 rounded-lg transition 
                                ${lookupStatus === 'found' ? 'bg-green-50' : lookupStatus === 'new' ? 'bg-yellow-50' : ''}`}
                            readOnly={lookupStatus === 'found'} // 找到後鎖定
                        />
                        <p className="text-sm text-gray-500 mt-1">
                            數值 ID (Hash): {barcode ? djb2Hash(barcode) : '尚未計算'}
                        </p>
                    </div>

                    {/* 價格與商店輸入/OCR 區 */}
                    <div className="grid grid-cols-2 gap-4 mb-4">
                        <div>
                            <label className="block text-gray-700 font-medium mb-1">標價 ($)</label>
                            <input
                                type="number"
                                value={currentPrice}
                                onChange={(e) => setCurrentPrice(e.target.value)}
                                placeholder="價格 (手動輸入)"
                                className="w-full p-3 border border-gray-300 rounded-lg"
                            />
                        </div>
                        <div>
                            <label className="block text-gray-700 font-medium mb-1">商店名稱</label>
                            <input
                                type="text"
                                value={comparisonResult.bestStore || ''} // 這裡用來顯示 OCR 或手動輸入的商店
                                onChange={(e) => setComparisonResult(prev => ({ ...prev, bestStore: e.target.value }))}
                                placeholder="商店名稱"
                                className="w-full p-3 border border-gray-300 rounded-lg"
                            />
                        </div>
                    </div>
                    
                    {/* 優惠細節輸入區 (新增) */}
                    <div className="mb-6">
                        <label className="block text-gray-700 font-medium mb-1">優惠細節/促銷活動 (Discount Details)</label>
                        <input
                            type="text"
                            value={discountDetails}
                            onChange={(e) => setDiscountDetails(e.target.value)}
                            placeholder="例如: 買二送一, 第二件半價, 組合價 $150"
                            className="w-full p-3 border border-gray-300 rounded-lg"
                        />
                    </div>

                    {/* 動作按鈕群組 */}
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                        {/* 條碼掃描 - 現在會打開 Modal */}
                        <button 
                            className={`p-3 rounded-lg text-white font-semibold shadow-lg transition-all bg-gray-500 hover:bg-gray-600`}
                            onClick={handleBarcodeScanClick}
                        >
                            <Camera className="inline-block w-5 h-5 mr-2" /> 啟動條碼掃描
                        </button>
                        
                        {/* 價格 OCR */}
                        <button 
                            className={`p-3 rounded-lg text-white font-semibold shadow-lg transition-all ${themePrimary} hover:opacity-80`}
                            onClick={() => document.getElementById('ocr-upload').click()}
                            disabled={isLoading}
                        >
                            <Upload className="inline-block w-5 h-5 mr-2" /> 
                            {isLoading ? 'OCR 分析中...' : '拍照/OCR 價格標籤'}
                        </button>
                        <input
                            type="file"
                            id="ocr-upload"
                            accept="image/*"
                            onChange={async (e) => {
                                const file = e.target.files[0];
                                if (!file) return;

                                setIsLoading(true);
                                try {
                                    const reader = new FileReader();
                                    reader.onloadend = async () => {
                                        const base64Image = reader.result.split(',')[1];
                                        const result = await performOCRAnalysis(base64Image);
                                        handleOcrSuccess(result);
                                    };
                                    reader.readAsDataURL(file);
                                } catch (error) {
                                    handleOcrError(error);
                                } finally {
                                    setIsLoading(false);
                                }
                            }}
                            className="hidden"
                        />
                    </div>
                    
                    {/* 儲存紀錄並比價 */}
                    <button 
                        className={`w-full mt-4 p-3 rounded-lg text-white font-semibold shadow-lg transition-all bg-emerald-500 hover:bg-emerald-600`}
                        onClick={saveAndComparePrice}
                        disabled={isLoading}
                    >
                        <ClipboardCheck className="inline-block w-5 h-5 mr-2" /> 
                        {isLoading ? '儲存並比價中...' : '儲存紀錄並比價'}
                    </button>
                </div>

                {/* 比價結果顯示區 */}
                <div className="mt-8">
                    <h2 className={`text-xl font-semibold ${themeText} mb-4 flex items-center`}>
                        <DollarSign className="w-5 h-5 mr-2" />
                        比價結果
                    </h2>
                    <div className={`p-6 rounded-xl shadow-xl border-2 ${comparisonResult.isBest ? 'border-green-500 bg-green-50' : 'border-yellow-500 bg-yellow-50'}`}>
                        <p className={`text-lg font-bold ${comparisonResult.isBest ? 'text-green-700' : 'text-yellow-700'}`}>
                            {comparisonResult.message}
                        </p>
                        {comparisonResult.bestPrice && (
                            <p className="text-sm text-gray-600 mt-2">
                                歷史最低標價: ${comparisonResult.bestPrice}
                            </p>
                        )}
                        {/* 提示現在紀錄了詳細的優惠資訊 */}
                        <p className="text-xs text-gray-500 mt-2">
                            **附註:** 您的紀錄已儲存在瀏覽器的本地儲存中 (Local Storage)。
                        </p>
                    </div>
                </div>
            </div>

            {/* 主題選擇 Modal */}
            {isThemeModalOpen && (
                <ThemeSelector 
                    theme={currentTheme} 
                    saveTheme={saveUserTheme} 
                    onClose={() => setIsThemeModalOpen(false)} 
                />
            )}

            {/* 條碼掃描 Modal - 掃描器介面 */}
            {isScannerModalOpen && (
                <BarcodeScannerModal
                    theme={currentTheme}
                    onScanSuccess={handleScanSuccess}
                    onClose={() => setIsScannerModalOpen(false)}
                />
            )}
        </div>
    );
}

// 渲染應用程式
export default App;
